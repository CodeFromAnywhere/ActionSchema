[
  {
    "modelName": "SwcFunction",
    "name": "getDotLocationBase",
    "start": 90,
    "end": 568,
    "length": 478,
    "raw": "export const getDotLocationBase = (\n  dotLocation: string,\n  replaceDotLocation?: string,\n) => {\n  const tokenized = tokenize(dotLocation);\n  tokenized.pop();\n  const final = replaceDotLocation\n    ? tokenized.concat(tokenize(replaceDotLocation))\n    : tokenized;\n\n  return buildPath(final);\n\n  // const chunks = dotLocation.split(\".\");\n  // chunks.pop();\n  // const dotLocationBase = chunks.join(\".\");\n  // return replace ? `${dotLocationBase}.${replace}` : dotLocationBase;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
      "name": "NamedParameters<typeof getDotLocationBase>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
      "operationRelativePath": "src/util/getDotlocationBase.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocationBase%3E",
        "definitions": {
          "NamedParameters<typeof getDotLocationBase>": {
            "type": "object",
            "properties": {
              "dotLocation": {
                "type": "string"
              },
              "replaceDotLocation": {
                "type": "string"
              }
            },
            "required": [
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "replaceDotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getDotLocation",
    "start": 35,
    "end": 142,
    "length": 107,
    "raw": "export const getDotLocation = (object: any, dotLocation: string) => {\n  return get(object, dotLocation);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotLocation.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotLocation.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotLocation.ts",
      "name": "NamedParameters<typeof getDotLocation>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotLocation.ts",
      "operationRelativePath": "src/util/getDotLocation.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocation%3E",
        "definitions": {
          "NamedParameters<typeof getDotLocation>": {
            "type": "object",
            "properties": {
              "object": {},
              "dotLocation": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "object",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getSchemaAtDotLocation",
    "start": 119,
    "end": 1212,
    "length": 1093,
    "raw": "export const getSchemaAtDotLocation = (\n  schema: ActionSchema,\n  dotLocation: string,\n): ActionSchema => {\n  const tokens = tokenize(dotLocation);\n  const first = tokens.shift();\n  const rest = buildPath(tokens);\n  if (first === undefined) {\n    // tokens should be empty array. No locations.\n    return schema;\n  }\n\n  const schemaAtLocation =\n    schema.type === \"array\"\n      ? schema.items\n      : schema.type === \"object\"\n      ? schema.properties?.[first]\n      : undefined;\n\n  if (!schemaAtLocation || schemaAtLocation === true) {\n    //shouldn't happen right?\n    return schema;\n  }\n\n  const finalSchema = !Array.isArray(schemaAtLocation)\n    ? // Regular schemas can be returned\n      schemaAtLocation\n    : // Wildcardss take the first one\n    first === \"*\"\n    ? schemaAtLocation[0]\n    : // If we have multiple, take the number token or first if not possible\n    schemaAtLocation.length < Number(first)\n    ? schemaAtLocation[0]\n    : schemaAtLocation[Number(first)];\n\n  // Recurse on this non-basecase (rest has 1 token less)\n  return getSchemaAtDotLocation(finalSchema, rest);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
      "name": "NamedParameters<typeof getSchemaAtDotLocation>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
      "operationRelativePath": "src/util/getSchemaAtDotLocation.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getSchemaAtDotLocation%3E",
        "definitions": {
          "NamedParameters<typeof getSchemaAtDotLocation>": {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              },
              "dotLocation": {
                "type": "string"
              }
            },
            "required": [
              "schema",
              "dotLocation"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          }
        }
      }
    },
    "parameters": [
      {
        "name": "schema",
        "schema": {
          "$ref": "#/definitions/ActionSchema"
        },
        "simplifiedSchema": {
          "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
          "properties": [
            {
              "name": "x-grid-items-location",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. Dot-notation of where to find the items.",
                "type": "string"
              }
            },
            {
              "name": "x-is-public",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                "type": "boolean"
              }
            },
            {
              "name": "x-plugin",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "deprecated",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "ui:widget",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "type": "string"
              }
            },
            {
              "name": "ui:options",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "properties": [
                  {
                    "name": "refModelName",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "$id",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$source",
              "required": false,
              "schema": {
                "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                "type": "string"
              }
            },
            {
              "name": "$schema",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$ref",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$comment",
              "required": false,
              "schema": {
                "fullComment": "Comment for the makers of the schema",
                "type": "string"
              }
            },
            {
              "name": "title",
              "required": false,
              "schema": {
                "fullComment": "In the form this shows up as the title for the property. More readable.",
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": false,
              "schema": {
                "fullComment": "Description for schema at this location",
                "type": "string"
              }
            },
            {
              "name": "default",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "writeOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "examples",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "multipleOf",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMaximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMinimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maxLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "pattern",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "additionalItems",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "items",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "uniqueItems",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "contains",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "required",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "additionalProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "definitions",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "properties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "patternProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dependencies",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "propertyNames",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "const",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "enum",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "format",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentMediaType",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentEncoding",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "if",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "then",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "else",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "allOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "anyOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "oneOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "not",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeServerless",
    "start": 251,
    "end": 1562,
    "length": 1311,
    "raw": "export const executeServerless = (\n  context: ExecuteContext,\n): Promise<{\n  isSuccessful: boolean;\n  message: string;\n}> => {\n  const {\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n  } = context;\n\n  return execute({\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n    setData: async (key, value) => {\n      await putData(databaseId, key, value);\n      return;\n    },\n\n    setStatus: async (key, value) => {\n      await putData(`status-${databaseId}`, key, value);\n      return;\n    },\n    fetchPlugin: async (details, completeContext) => {\n      //TODO: this one fetches things in the next.js edge environment\n      fetchPlugin;\n    },\n    getData: async (key) => {\n      //TODO\n      const data = await getStoreData(databaseId);\n      return data;\n    },\n\n    getStatus: async (key) => {\n      //TODO\n      const data = await getStoreData(`status-${databaseId}`);\n      return \"busy\";\n    },\n\n    recurseFunction: async (item) => {\n      const result = await fetch(\"https://actionschema.com/api/execute\", {\n        method: \"POST\",\n        body: JSON.stringify(context),\n        headers: {},\n      });\n    },\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/executeServerless.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/executeServerless.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ExecuteContext": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/definitions/ActionSchema"
          },
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {},
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchemaPlugin"
            }
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      },
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "ActionSchemaPlugin": {
        "type": "object",
        "properties": {
          "__id": {
            "type": "string",
            "description": "The entire URL should be here"
          },
          "headers": {
            "type": "string"
          },
          "localhostOpenapiUrl": {
            "type": "string",
            "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
          },
          "isInternallyHosted": {
            "type": "boolean",
            "description": "If true, this indicates we should always use localhost, even in production."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/executeServerless.ts",
      "name": "NamedParameters<typeof executeServerless>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/executeServerless.ts",
      "operationRelativePath": "src/environments/serverless/executeServerless.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeServerless%3E",
        "definitions": {
          "NamedParameters<typeof executeServerless>": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/definitions/ExecuteContext"
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ExecuteContext": {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              },
              "dotLocation": {
                "type": "string",
                "description": "Data dotlocation"
              },
              "databaseId": {
                "type": "string"
              },
              "value": {},
              "skipPlugin": {
                "type": "boolean",
                "description": "If true, skips executing the plugin"
              },
              "returnDotLocation": {
                "type": "string",
                "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
              },
              "updateCallbackUrl": {
                "type": "string",
                "description": "An url to be called back on with updates"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActionSchemaPlugin"
                }
              }
            },
            "required": [
              "schema",
              "dotLocation",
              "databaseId",
              "actionSchemaPlugins"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "ActionSchemaPlugin": {
            "type": "object",
            "properties": {
              "__id": {
                "type": "string",
                "description": "The entire URL should be here"
              },
              "headers": {
                "type": "string"
              },
              "localhostOpenapiUrl": {
                "type": "string",
                "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
              },
              "isInternallyHosted": {
                "type": "boolean",
                "description": "If true, this indicates we should always use localhost, even in production."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/ExecuteContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "schema",
              "required": true,
              "schema": {
                "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
                "properties": [
                  {
                    "name": "x-grid-items-location",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. Dot-notation of where to find the items.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-is-public",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "x-plugin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "deprecated",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "ui:widget",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ui:options",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "properties": [
                        {
                          "name": "refModelName",
                          "required": false,
                          "schema": {
                            "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "$id",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$source",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "$schema",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$ref",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$comment",
                    "required": false,
                    "schema": {
                      "fullComment": "Comment for the makers of the schema",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "fullComment": "In the form this shows up as the title for the property. More readable.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Description for schema at this location",
                      "type": "string"
                    }
                  },
                  {
                    "name": "default",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "readOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "writeOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "examples",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "multipleOf",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMaximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMinimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "pattern",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "additionalItems",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "items",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "uniqueItems",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "contains",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "required",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "additionalProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "definitions",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "properties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "patternProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "dependencies",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "propertyNames",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "const",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "enum",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "type",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "format",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentMediaType",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentEncoding",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "if",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "then",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "else",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "allOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "anyOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "oneOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "not",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "",
                      "properties": [
                        {
                          "name": "__id",
                          "required": false,
                          "schema": {
                            "fullComment": "The entire URL should be here",
                            "type": "string"
                          }
                        },
                        {
                          "name": "headers",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "localhostOpenapiUrl",
                          "required": false,
                          "schema": {
                            "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                            "type": "string"
                          }
                        },
                        {
                          "name": "isInternallyHosted",
                          "required": false,
                          "schema": {
                            "fullComment": "If true, this indicates we should always use localhost, even in production.",
                            "type": "boolean"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "ActionSchemaPlugin"
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "putData",
    "start": 0,
    "end": 81,
    "length": 81,
    "raw": "export const putData = (databaseId: string, key: string, value: any) => {\n  //\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "name": "NamedParameters<typeof putData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
      "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getStoreData",
    "start": 82,
    "end": 143,
    "length": 61,
    "raw": "export const getStoreData = (databaseId: string) => {\n  //\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "name": "NamedParameters<typeof getStoreData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStoreData%3E",
        "definitions": {
          "NamedParameters<typeof getStoreData>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string",
                "description": "E.g. the full JSON object"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string",
          "description": "E.g. the full JSON object"
        },
        "simplifiedSchema": {
          "fullComment": "E.g. the full JSON object",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeGridPluginWorker",
    "start": 405,
    "end": 1016,
    "length": 611,
    "raw": "const executeGridPluginWorker = async (context: WorkerContext) => {\n  const {\n    completeContext,\n    dotLocation,\n    schema,\n    actionSchemaPlugins,\n    databaseId,\n  } = context;\n\n  const plugins = getSchemaAtDotLocation(schema, dotLocation);\n  const plugin = Array.isArray(plugins) ? plugins[0] : plugins;\n  if (!plugin) {\n    return;\n  }\n\n  const $openapi = plugin.$openapi;\n  const details = await getOpenapiDetails($openapi, actionSchemaPlugins);\n\n  if (!details) {\n    return;\n  }\n\n  const data = await fetchPlugin(details, completeContext);\n  await setValue(databaseId, dotLocation, schema, data);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/executeGridPluginWorker.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/executeGridPluginWorker.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "WorkerContext": {
        "type": "object",
        "properties": {
          "completeContext": {
            "type": "object"
          },
          "databaseId": {
            "type": "string"
          },
          "dotLocation": {
            "type": "string"
          },
          "schema": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "required": [
          "completeContext",
          "databaseId",
          "dotLocation",
          "schema"
        ]
      },
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "type": "number"
          },
          "minLength": {
            "type": "number"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "type": "number"
          },
          "minItems": {
            "type": "number"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "type": "number"
          },
          "minProperties": {
            "type": "number"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "const": "array"
              },
              {
                "type": "string",
                "const": "boolean"
              },
              {
                "type": "string",
                "const": "integer"
              },
              {
                "type": "string",
                "const": "null"
              },
              {
                "type": "string",
                "const": "number"
              },
              {
                "type": "string",
                "const": "object"
              },
              {
                "type": "string",
                "const": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "array",
                    "boolean",
                    "integer",
                    "null",
                    "number",
                    "object",
                    "string"
                  ]
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/executeGridPluginWorker.ts",
      "name": "NamedParameters<typeof executeGridPluginWorker>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/executeGridPluginWorker.ts",
      "operationRelativePath": "src/environments/server/executeGridPluginWorker.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeGridPluginWorker%3E",
        "definitions": {
          "NamedParameters<typeof executeGridPluginWorker>": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/definitions/WorkerContext"
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "WorkerContext": {
            "type": "object",
            "properties": {
              "completeContext": {
                "type": "object"
              },
              "databaseId": {
                "type": "string"
              },
              "dotLocation": {
                "type": "string"
              },
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "required": [
              "completeContext",
              "databaseId",
              "dotLocation",
              "schema"
            ]
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "type": "number"
              },
              "minLength": {
                "type": "number"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "type": "number"
              },
              "minItems": {
                "type": "number"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "type": "number"
              },
              "minProperties": {
                "type": "number"
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "type": "string",
                    "const": "array"
                  },
                  {
                    "type": "string",
                    "const": "boolean"
                  },
                  {
                    "type": "string",
                    "const": "integer"
                  },
                  {
                    "type": "string",
                    "const": "null"
                  },
                  {
                    "type": "string",
                    "const": "number"
                  },
                  {
                    "type": "string",
                    "const": "object"
                  },
                  {
                    "type": "string",
                    "const": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                      ]
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/WorkerContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "completeContext",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "schema",
              "required": true,
              "schema": {
                "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
                "properties": [
                  {
                    "name": "x-grid-items-location",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. Dot-notation of where to find the items.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-is-public",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "x-plugin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "deprecated",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "ui:widget",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ui:options",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "properties": [
                        {
                          "name": "refModelName",
                          "required": false,
                          "schema": {
                            "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "$id",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$source",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "$schema",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$ref",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$comment",
                    "required": false,
                    "schema": {
                      "fullComment": "Comment for the makers of the schema",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "fullComment": "In the form this shows up as the title for the property. More readable.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Description for schema at this location",
                      "type": "string"
                    }
                  },
                  {
                    "name": "default",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "readOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "writeOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "examples",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "multipleOf",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMaximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMinimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxLength",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minLength",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "pattern",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "additionalItems",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "items",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxItems",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minItems",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "uniqueItems",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "contains",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxProperties",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minProperties",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "required",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "additionalProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "definitions",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "properties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "patternProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "dependencies",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "propertyNames",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "const",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "enum",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "type",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "format",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentMediaType",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentEncoding",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "if",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "then",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "else",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "allOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "anyOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "oneOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "not",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "setValue",
    "start": 497,
    "end": 1051,
    "length": 554,
    "raw": "export const setValue = async (\n  databaseId: string,\n  dotLocation: string,\n  schema: ActionSchema,\n  data: any,\n  /** Are to be inferred from the schema */\n  options?: ValueOptions,\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  //1) Set new data\n  // could be a more direct usage of lmdb\n  let db = getDb(databaseId);\n  await db.put(dotLocation, data);\n\n  const values = flatten(data);\n\n  //2) Update statuses\n  await setPropertyStatusDone(schema, dotLocation, databaseId);\n\n  return { isSuccessful: true, message: \"Set the value\" };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/setValue.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/setValue.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "ValueOptions": {
        "type": "object",
        "properties": {
          "objectReplace": {
            "type": "boolean",
            "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
          },
          "arrayReplace": {
            "type": "boolean",
            "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
          },
          "arrayDiscriminatorPropertyKey": {
            "type": "string",
            "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/setValue.ts",
      "name": "NamedParameters<typeof setValue>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/setValue.ts",
      "operationRelativePath": "src/environments/server/setValue.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20setValue%3E",
        "definitions": {
          "NamedParameters<typeof setValue>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              },
              "dotLocation": {
                "type": "string"
              },
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              },
              "data": {},
              "options": {
                "$ref": "#/definitions/ValueOptions",
                "description": "Are to be inferred from the schema"
              }
            },
            "required": [
              "databaseId",
              "dotLocation",
              "schema",
              "data"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "ValueOptions": {
            "type": "object",
            "properties": {
              "objectReplace": {
                "type": "boolean",
                "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
              },
              "arrayReplace": {
                "type": "boolean",
                "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
              },
              "arrayDiscriminatorPropertyKey": {
                "type": "string",
                "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "schema",
        "schema": {
          "$ref": "#/definitions/ActionSchema"
        },
        "simplifiedSchema": {
          "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
          "properties": [
            {
              "name": "x-grid-items-location",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. Dot-notation of where to find the items.",
                "type": "string"
              }
            },
            {
              "name": "x-is-public",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                "type": "boolean"
              }
            },
            {
              "name": "x-plugin",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "deprecated",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "ui:widget",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "type": "string"
              }
            },
            {
              "name": "ui:options",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "properties": [
                  {
                    "name": "refModelName",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "$id",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$source",
              "required": false,
              "schema": {
                "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                "type": "string"
              }
            },
            {
              "name": "$schema",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$ref",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$comment",
              "required": false,
              "schema": {
                "fullComment": "Comment for the makers of the schema",
                "type": "string"
              }
            },
            {
              "name": "title",
              "required": false,
              "schema": {
                "fullComment": "In the form this shows up as the title for the property. More readable.",
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": false,
              "schema": {
                "fullComment": "Description for schema at this location",
                "type": "string"
              }
            },
            {
              "name": "default",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "writeOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "examples",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "multipleOf",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMaximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMinimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maxLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "pattern",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "additionalItems",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "items",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "uniqueItems",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "contains",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "required",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "additionalProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "definitions",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "properties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "patternProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dependencies",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "propertyNames",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "const",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "enum",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "format",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentMediaType",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentEncoding",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "if",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "then",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "else",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "allOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "anyOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "oneOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "not",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "data",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "options",
        "schema": {
          "$ref": "#/definitions/ValueOptions",
          "description": "Are to be inferred from the schema"
        },
        "simplifiedSchema": {
          "fullComment": "Are to be inferred from the schema\n\n",
          "properties": [
            {
              "name": "objectReplace",
              "required": false,
              "schema": {
                "fullComment": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.",
                "type": "boolean"
              }
            },
            {
              "name": "arrayReplace",
              "required": false,
              "schema": {
                "fullComment": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below).",
                "type": "boolean"
              }
            },
            {
              "name": "arrayDiscriminatorPropertyKey",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.",
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcInterface",
    "name": "ValueOptions",
    "start": 1053,
    "end": 1779,
    "raw": "export type ValueOptions = {\n  /**\n   * If true, will replace the object rather than overwriting it where needed.\n   *\n   * By default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.\n   */\n  objectReplace?: boolean;\n  /**\n    If true, will replace items in the array fully.\n    \n    By default, ActionSchema will insert into an array with an optional discriminator (see below).\n     */\n  arrayReplace?: boolean;\n\n  /**\n   * If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.\n   */\n  arrayDiscriminatorPropertyKey?: string;\n};",
    "length": 726,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/setValue.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/setValue.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "objectReplace": {
            "type": "boolean",
            "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
          },
          "arrayReplace": {
            "type": "boolean",
            "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
          },
          "arrayDiscriminatorPropertyKey": {
            "type": "string",
            "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "objectReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.",
              "type": "boolean"
            }
          },
          {
            "name": "arrayReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below).",
              "type": "boolean"
            }
          },
          {
            "name": "arrayDiscriminatorPropertyKey",
            "required": false,
            "schema": {
              "fullComment": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.",
              "type": "string"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getDb",
    "start": 30,
    "end": 227,
    "length": 197,
    "raw": "export const getDb = (databaseId: string) => {\n  return open({\n    path: `data/${databaseId}/data`,\n    // any options go here, we can turn on compression like this:\n    compression: true,\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getDb.ts",
      "name": "NamedParameters<typeof getDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getDb.ts",
      "operationRelativePath": "src/environments/server/storage/getDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDb%3E",
        "definitions": {
          "NamedParameters<typeof getDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getActionSchema",
    "start": 127,
    "end": 461,
    "length": 334,
    "raw": "export const getActionSchema = async (databaseId: string) => {\n  const schemaPath = path.join(\n    new URL(import.meta.url).pathname,\n    \"../../schemas\",\n    databaseId + \".schema.json\",\n  );\n\n  const schemaString = await fs.readFile(schemaPath, \"utf8\");\n  const schema = JSON.parse(schemaString) as ActionSchema;\n  return schema;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getActionSchema.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getActionSchema.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getActionSchema.ts",
      "name": "NamedParameters<typeof getActionSchema>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getActionSchema.ts",
      "operationRelativePath": "src/environments/server/storage/getActionSchema.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getActionSchema%3E",
        "definitions": {
          "NamedParameters<typeof getActionSchema>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getStatusDb",
    "start": 30,
    "end": 235,
    "length": 205,
    "raw": "export const getStatusDb = (databaseId: string) => {\n  return open({\n    path: `data/${databaseId}/status`,\n    // any options go here, we can turn on compression like this:\n    compression: true,\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getStatusDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getStatusDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getStatusDb.ts",
      "name": "NamedParameters<typeof getStatusDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getStatusDb.ts",
      "operationRelativePath": "src/environments/server/storage/getStatusDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStatusDb%3E",
        "definitions": {
          "NamedParameters<typeof getStatusDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getValue",
    "start": 83,
    "end": 506,
    "length": 423,
    "raw": "export const getValue = (\n  databaseId: string,\n  /** Will find all locations starting with this */\n  dotLocation: string,\n) => {\n  let db = getDb(databaseId);\n\n  const dotLocations = db\n    .getRange({ start: dotLocation })\n    .filter((entry) => entry.key.toString().startsWith(dotLocation))\n    .map(({ key, value }) => ({ key, value })).asArray;\n\n  // TODO: serialise dotLocations into a JSON.\n  return dotLocations;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getValue.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getValue.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getValue.ts",
      "name": "NamedParameters<typeof getValue>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getValue.ts",
      "operationRelativePath": "src/environments/server/storage/getValue.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getValue%3E",
        "definitions": {
          "NamedParameters<typeof getValue>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              },
              "dotLocation": {
                "type": "string",
                "description": "Will find all locations starting with this"
              }
            },
            "required": [
              "databaseId",
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string",
          "description": "Will find all locations starting with this"
        },
        "simplifiedSchema": {
          "fullComment": "Will find all locations starting with this",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getPlugins",
    "start": 85,
    "end": 441,
    "length": 356,
    "raw": "export const getPlugins = () => {\n  const actionSchemaPlugins: ActionSchemaPlugin[] = [\n    {\n      __id: \"https://api.codefromanywhere.com/openapi.json\",\n      headers: '{\"Authorization\":\"Bearer xxx\"}',\n      localhostOpenapiUrl:\n        \"http://localhost:42000/openapi.json?hostname=api.codefromanywhere.com\",\n    },\n  ];\n  return actionSchemaPlugins;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getPlugins.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getPlugins.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/storage/getPlugins.ts",
      "name": "NamedParameters<typeof getPlugins>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/storage/getPlugins.ts",
      "operationRelativePath": "src/environments/server/storage/getPlugins.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getPlugins%3E",
        "definitions": {
          "NamedParameters<typeof getPlugins>": {
            "type": "object",
            "additionalProperties": false
          }
        }
      }
    }
  },
  {
    "modelName": "SwcVariable",
    "name": "piscina",
    "start": 280,
    "end": 423,
    "length": 143,
    "raw": "const piscina = new Piscina({\n  // The URL must be a file:// URL\n  filename: new URL(\"./executeGridPluginWorker.js\", import.meta.url).href,\n});",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcFunction",
    "name": "executeGridPlugin",
    "start": 425,
    "end": 1091,
    "length": 666,
    "raw": "export const executeGridPlugin = async (context: {\n  schema: ActionSchema;\n  dotLocation: string;\n  completeContext: { [key: string]: any };\n  databaseId: string;\n}) => {\n  const { completeContext, dotLocation, schema, databaseId } = context;\n\n  const actionSchemaPlugins = getPlugins();\n\n  const workerContext: WorkerContext = {\n    completeContext,\n    dotLocation,\n    schema,\n    actionSchemaPlugins,\n    databaseId,\n  };\n\n  let status = getStatusDb(databaseId);\n  // Set status to queued\n  await status.put(dotLocation, \"queued\");\n\n  // Execute plugin and set result\n  const result = await piscina.run(workerContext);\n\n  console.log({ result }); // Prints 10\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
      "name": "NamedParameters<typeof executeGridPlugin>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/executeGridPlugin.ts",
      "operationRelativePath": "src/environments/server/executeGridPlugin.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeGridPlugin%3E",
        "definitions": {
          "NamedParameters<typeof executeGridPlugin>": {
            "type": "object",
            "properties": {
              "context": {
                "type": "object",
                "properties": {
                  "schema": {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  "dotLocation": {
                    "type": "string"
                  },
                  "completeContext": {
                    "type": "object"
                  },
                  "databaseId": {
                    "type": "string"
                  }
                },
                "required": [
                  "schema",
                  "dotLocation",
                  "completeContext",
                  "databaseId"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string"
            },
            "completeContext": {
              "type": "object"
            },
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "schema",
            "dotLocation",
            "completeContext",
            "databaseId"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "schema",
              "required": true,
              "schema": {
                "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
                "properties": [
                  {
                    "name": "x-grid-items-location",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. Dot-notation of where to find the items.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-is-public",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "x-plugin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "deprecated",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "ui:widget",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ui:options",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "properties": [
                        {
                          "name": "refModelName",
                          "required": false,
                          "schema": {
                            "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "$id",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$source",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "$schema",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$ref",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$comment",
                    "required": false,
                    "schema": {
                      "fullComment": "Comment for the makers of the schema",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "fullComment": "In the form this shows up as the title for the property. More readable.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Description for schema at this location",
                      "type": "string"
                    }
                  },
                  {
                    "name": "default",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "readOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "writeOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "examples",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "multipleOf",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMaximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMinimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "pattern",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "additionalItems",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "items",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "uniqueItems",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "contains",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "required",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "additionalProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "definitions",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "properties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "patternProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "dependencies",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "propertyNames",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "const",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "enum",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "type",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "format",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentMediaType",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentEncoding",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "if",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "then",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "else",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "allOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "anyOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "oneOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "not",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "completeContext",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "setPropertyStatusDone",
    "start": 388,
    "end": 1512,
    "length": 1124,
    "raw": "export const setPropertyStatusDone = async (\n  schema: ActionSchema,\n  dotLocation: string,\n  databaseId: string,\n) => {\n  let status = getStatusDb(databaseId);\n\n  // Remove busy status\n  status.remove(dotLocation);\n\n  // This would be one level up, so the entire object\n  const baseDotLocation = getDotLocationBase(dotLocation);\n\n  // Look at other columns that have this datapoint in `propertyDependencies`\n  const properties = getSchemaAtDotLocation(schema, baseDotLocation).properties;\n\n  if (!properties) {\n    return;\n  }\n\n  const dependantKeys = Object.keys(properties).filter((key) => {\n    const schema = properties[key];\n    const plugin = Array.isArray(schema[\"x-plugin\"])\n      ? schema[\"x-plugin\"][0]\n      : schema[\"x-plugin\"];\n\n    const isDependant = plugin?.propertyDependencies?.includes(dotLocation);\n    return isDependant;\n  });\n\n  // Set those status to `stale`\n  const dependantDotLocations = dependantKeys.map((k) =>\n    getDotLocationBase(dotLocation, k),\n  );\n\n  await Promise.all(\n    dependantDotLocations.map(async (dotLocation) => {\n      await status.put(dotLocation, \"stale\");\n    }),\n  );\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/setPropertyStatusDone.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/setPropertyStatusDone.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/setPropertyStatusDone.ts",
      "name": "NamedParameters<typeof setPropertyStatusDone>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/setPropertyStatusDone.ts",
      "operationRelativePath": "src/environments/server/setPropertyStatusDone.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20setPropertyStatusDone%3E",
        "definitions": {
          "NamedParameters<typeof setPropertyStatusDone>": {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              },
              "dotLocation": {
                "type": "string"
              },
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "schema",
              "dotLocation",
              "databaseId"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          }
        }
      }
    },
    "parameters": [
      {
        "name": "schema",
        "schema": {
          "$ref": "#/definitions/ActionSchema"
        },
        "simplifiedSchema": {
          "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
          "properties": [
            {
              "name": "x-grid-items-location",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. Dot-notation of where to find the items.",
                "type": "string"
              }
            },
            {
              "name": "x-is-public",
              "required": false,
              "schema": {
                "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                "type": "boolean"
              }
            },
            {
              "name": "x-plugin",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "deprecated",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "ui:widget",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "type": "string"
              }
            },
            {
              "name": "ui:options",
              "required": false,
              "schema": {
                "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                "properties": [
                  {
                    "name": "refModelName",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                      "type": "string"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "$id",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$source",
              "required": false,
              "schema": {
                "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                "type": "string"
              }
            },
            {
              "name": "$schema",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$ref",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$comment",
              "required": false,
              "schema": {
                "fullComment": "Comment for the makers of the schema",
                "type": "string"
              }
            },
            {
              "name": "title",
              "required": false,
              "schema": {
                "fullComment": "In the form this shows up as the title for the property. More readable.",
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": false,
              "schema": {
                "fullComment": "Description for schema at this location",
                "type": "string"
              }
            },
            {
              "name": "default",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "readOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "writeOnly",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "examples",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "multipleOf",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMaximum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "minimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "exclusiveMinimum",
              "required": false,
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "maxLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minLength",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "pattern",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "additionalItems",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "items",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minItems",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "uniqueItems",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "contains",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "maxProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "minProperties",
              "required": false,
              "schema": {
                "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                "type": "number"
              }
            },
            {
              "name": "required",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "type": "string"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "additionalProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "definitions",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "properties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "patternProperties",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dependencies",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "propertyNames",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "const",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "enum",
              "required": false,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "type",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "format",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentMediaType",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "contentEncoding",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "if",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "then",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "else",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "allOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "anyOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "oneOf",
              "required": false,
              "schema": {
                "fullComment": "",
                "items": [
                  {
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    },
                    "name": "ActionSchema"
                  }
                ],
                "type": "array"
              }
            },
            {
              "name": "not",
              "required": false,
              "schema": {
                "circularRefName": "ActionSchema",
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "spawner",
    "start": 181,
    "end": 1147,
    "length": 966,
    "raw": "export const spawner = async (databaseId: string) => {\n  let status = getStatusDb(databaseId);\n  const schema = await getActionSchema(databaseId);\n  setInterval(() => {\n    // get the stale ones\n    const dotLocations = status\n      // Limit is the maximum amount we'll do each 100ms\n      .getRange({ limit: 1000 })\n      .filter((entry) => {\n        const dotLocation = String(entry.key);\n\n        return entry.value === \"stale\";\n      })\n      .map((entry) => String(entry.key)).asArray;\n\n    /**\n   TODO: for recalculations, ensure to only get the stale ones of which the dependants are not also stale\n\n    1. look in schema for each dotLocation to find x-plugin.propertyDependencies. all at once\n\n    2. remove those dotLocations as they\n    */\n\n    console.log({ dotLocations });\n\n    dotLocations.map((dotLocation) =>\n      executeGridPlugin({\n        completeContext: {},\n        dotLocation,\n        schema,\n        databaseId,\n      }),\n    );\n  }, 50);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/spawner.test.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/spawner.test.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/server/spawner.test.ts",
      "name": "NamedParameters<typeof spawner>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/server/spawner.test.ts",
      "operationRelativePath": "src/environments/server/spawner.test.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20spawner%3E",
        "definitions": {
          "NamedParameters<typeof spawner>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeBrowser",
    "start": 196,
    "end": 1360,
    "length": 1164,
    "raw": "export const executeBrowser = (\n  context: ExecuteContext,\n): Promise<{\n  isSuccessful: boolean;\n  message: string;\n}> => {\n  const {\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n  } = context;\n\n  return execute({\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n    recurseFunction: (item) => {\n      return executeBrowser(item);\n    },\n\n    setData: async (key, value) => {\n      await putData(databaseId, key, value);\n      return;\n    },\n\n    setStatus: async (key, value) => {\n      await putData(`status-${databaseId}`, key, value);\n      return;\n    },\n\n    fetchPlugin: async (details, completeContext) => {\n      // TODO: this one fetches things via the corse-proxy\n      return undefined;\n    },\n\n    getData: async (key) => {\n      //TODO\n      const data = await getStoreData(databaseId);\n      return data;\n    },\n\n    getStatus: async (key) => {\n      //TODO\n      const data = await getStoreData(`status-${databaseId}`);\n      return \"busy\";\n    },\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/executeBrowser.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/executeBrowser.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ExecuteContext": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/definitions/ActionSchema"
          },
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {},
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchemaPlugin"
            }
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      },
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "ActionSchemaPlugin": {
        "type": "object",
        "properties": {
          "__id": {
            "type": "string",
            "description": "The entire URL should be here"
          },
          "headers": {
            "type": "string"
          },
          "localhostOpenapiUrl": {
            "type": "string",
            "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
          },
          "isInternallyHosted": {
            "type": "boolean",
            "description": "If true, this indicates we should always use localhost, even in production."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/executeBrowser.ts",
      "name": "NamedParameters<typeof executeBrowser>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/executeBrowser.ts",
      "operationRelativePath": "src/environments/browser/executeBrowser.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeBrowser%3E",
        "definitions": {
          "NamedParameters<typeof executeBrowser>": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/definitions/ExecuteContext"
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ExecuteContext": {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/definitions/ActionSchema"
              },
              "dotLocation": {
                "type": "string",
                "description": "Data dotlocation"
              },
              "databaseId": {
                "type": "string"
              },
              "value": {},
              "skipPlugin": {
                "type": "boolean",
                "description": "If true, skips executing the plugin"
              },
              "returnDotLocation": {
                "type": "string",
                "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
              },
              "updateCallbackUrl": {
                "type": "string",
                "description": "An url to be called back on with updates"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActionSchemaPlugin"
                }
              }
            },
            "required": [
              "schema",
              "dotLocation",
              "databaseId",
              "actionSchemaPlugins"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "ActionSchemaPlugin": {
            "type": "object",
            "properties": {
              "__id": {
                "type": "string",
                "description": "The entire URL should be here"
              },
              "headers": {
                "type": "string"
              },
              "localhostOpenapiUrl": {
                "type": "string",
                "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
              },
              "isInternallyHosted": {
                "type": "boolean",
                "description": "If true, this indicates we should always use localhost, even in production."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/ExecuteContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "schema",
              "required": true,
              "schema": {
                "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
                "properties": [
                  {
                    "name": "x-grid-items-location",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. Dot-notation of where to find the items.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-is-public",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "x-plugin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "deprecated",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "ui:widget",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ui:options",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "properties": [
                        {
                          "name": "refModelName",
                          "required": false,
                          "schema": {
                            "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "$id",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$source",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "$schema",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$ref",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$comment",
                    "required": false,
                    "schema": {
                      "fullComment": "Comment for the makers of the schema",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "fullComment": "In the form this shows up as the title for the property. More readable.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Description for schema at this location",
                      "type": "string"
                    }
                  },
                  {
                    "name": "default",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "readOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "writeOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "examples",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "multipleOf",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMaximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMinimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "pattern",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "additionalItems",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "items",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "uniqueItems",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "contains",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "required",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "additionalProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "definitions",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "properties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "patternProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "dependencies",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "propertyNames",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "const",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "enum",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "type",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "format",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentMediaType",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentEncoding",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "if",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "then",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "else",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "allOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "anyOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "oneOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "not",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "",
                      "properties": [
                        {
                          "name": "__id",
                          "required": false,
                          "schema": {
                            "fullComment": "The entire URL should be here",
                            "type": "string"
                          }
                        },
                        {
                          "name": "headers",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "localhostOpenapiUrl",
                          "required": false,
                          "schema": {
                            "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                            "type": "string"
                          }
                        },
                        {
                          "name": "isInternallyHosted",
                          "required": false,
                          "schema": {
                            "fullComment": "If true, this indicates we should always use localhost, even in production.",
                            "type": "boolean"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "ActionSchemaPlugin"
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcVariable",
    "name": "dbName",
    "start": 0,
    "end": 24,
    "length": 24,
    "raw": "const dbName = \"schema\";",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcVariable",
    "name": "version",
    "start": 25,
    "end": 41,
    "length": 16,
    "raw": "let version = 1;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcVariable",
    "name": "request",
    "start": 42,
    "end": 72,
    "length": 30,
    "raw": "let request: IDBOpenDBRequest;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcVariable",
    "name": "db",
    "start": 73,
    "end": 93,
    "length": 20,
    "raw": "let db: IDBDatabase;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcFunction",
    "name": "initDb",
    "start": 95,
    "end": 919,
    "length": 824,
    "raw": "export const initDb = async (databaseId: string): Promise<boolean> => {\n  const isSuccessful = await new Promise<boolean>((resolve) => {\n    // open the connection\n    request = indexedDB.open(dbName);\n\n    request.onupgradeneeded = () => {\n      db = request.result;\n\n      // if the data object store doesn't exist, create it\n      if (!db.objectStoreNames.contains(databaseId)) {\n        console.log(\"Creating users store\");\n        db.createObjectStore(databaseId, {\n          // keyPath: \"id\"\n        });\n      }\n      // no need to resolve here\n    };\n\n    request.onsuccess = () => {\n      db = request.result;\n      version = db.version;\n      console.log(\"request.onsuccess - initDB\", version);\n      resolve(true);\n    };\n\n    request.onerror = () => {\n      resolve(false);\n    };\n  });\n\n  return isSuccessful;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "name": "NamedParameters<typeof initDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20initDb%3E",
        "definitions": {
          "NamedParameters<typeof initDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "putData",
    "start": 921,
    "end": 1817,
    "length": 896,
    "raw": "export const putData = <T>(\n  databaseId: string,\n  key: string,\n  value: T,\n): Promise<{ isSuccessful: boolean; message: string; result?: T }> => {\n  return new Promise((resolve) => {\n    request = indexedDB.open(dbName, version);\n\n    request.onsuccess = () => {\n      console.log(\"request.onsuccess - putData\");\n      db = request.result;\n      const tx = db.transaction(databaseId, \"readwrite\");\n      const store = tx.objectStore(databaseId);\n      store.put(value, key);\n      resolve({ isSuccessful: true, message: `Put ${key}`, result: value });\n    };\n\n    request.onerror = () => {\n      const error = request.error?.message;\n      if (error) {\n        resolve({ isSuccessful: false, message: error, result: undefined });\n      } else {\n        resolve({\n          isSuccessful: false,\n          message: \"Unknown error\",\n          result: undefined,\n        });\n      }\n    };\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "name": "NamedParameters<typeof putData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
      "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "deleteData",
    "start": 1819,
    "end": 2393,
    "length": 574,
    "raw": "export const deleteData = (\n  databaseId: string,\n  key: string,\n): Promise<boolean> => {\n  return new Promise((resolve) => {\n    request = indexedDB.open(dbName, version);\n\n    request.onsuccess = () => {\n      console.log(\"request.onsuccess - deleteData\", key);\n      db = request.result;\n      const tx = db.transaction(databaseId, \"readwrite\");\n      const store = tx.objectStore(databaseId);\n      const res = store.delete(key);\n\n      res.onsuccess = () => {\n        resolve(true);\n      };\n\n      res.onerror = () => {\n        resolve(false);\n      };\n    };\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "name": "NamedParameters<typeof deleteData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20deleteData%3E",
        "definitions": {
          "NamedParameters<typeof deleteData>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            },
            "required": [
              "databaseId",
              "key"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "key",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "updateData",
    "start": 2430,
    "end": 3105,
    "length": 675,
    "raw": "export const updateData = <T>(\n  databaseId: string,\n  key: string,\n  data: T,\n): Promise<T | string | null> => {\n  return new Promise((resolve) => {\n    request = indexedDB.open(dbName, version);\n\n    request.onsuccess = () => {\n      console.log(\"request.onsuccess - updateData\", key);\n      db = request.result;\n      const tx = db.transaction(databaseId, \"readwrite\");\n      const store = tx.objectStore(databaseId);\n      const res = store.get(key);\n      res.onsuccess = () => {\n        const newData = { ...res.result, ...data };\n        store.put(newData);\n        resolve(newData);\n      };\n      res.onerror = () => {\n        resolve(null);\n      };\n    };\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "name": "NamedParameters<typeof updateData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
      "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
      "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getStoreData",
    "start": 3134,
    "end": 3654,
    "length": 520,
    "raw": "export const getStoreData = <T>(\n  /** E.g. the full JSON object */\n  databaseId: string,\n): Promise<T[]> => {\n  return new Promise((resolve) => {\n    request = indexedDB.open(dbName);\n\n    request.onsuccess = () => {\n      console.log(\"request.onsuccess - getAllData\");\n      db = request.result;\n      const tx = db.transaction(databaseId, \"readonly\");\n      const store = tx.objectStore(databaseId);\n      const res = store.getAll();\n      res.onsuccess = () => {\n        resolve(res.result);\n      };\n    };\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/storage/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "name": "NamedParameters<typeof getStoreData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/serverless/vercelKvStore.ts",
      "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStoreData%3E",
        "definitions": {
          "NamedParameters<typeof getStoreData>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string",
                "description": "E.g. the full JSON object"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string",
          "description": "E.g. the full JSON object"
        },
        "simplifiedSchema": {
          "fullComment": "E.g. the full JSON object",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "CorsProxy",
    "start": 127,
    "end": 538,
    "length": 411,
    "raw": "export const CorsProxy: NextApiHandler = async (req, res) => {\n  const url = Array.isArray(req.query.url) ? req.query.url[0] : req.query.url;\n  if (!url) {\n    res.status(301);\n    return;\n  }\n  console.log({ url });\n  try {\n    const resProxy = await fetch(url);\n    const text = await resProxy.text();\n    res.status(200).send(text);\n  } catch (error: any) {\n    res.status(400).send(error.toString());\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/api/cors-proxy.tsx",
    "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/api/cors-proxy.tsx",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/environments/browser/api/cors-proxy.tsx",
      "name": "NamedParameters<typeof CorsProxy>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/environments/browser/api/cors-proxy.tsx",
      "operationRelativePath": "src/environments/browser/api/cors-proxy.tsx",
      "error": "TypeError: WeakMap keys must be objects or non-registered symbols"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "tryParseYamlToJson",
    "start": 119,
    "end": 417,
    "length": 298,
    "raw": "export const tryParseYamlToJson = <T = any>(yamlString: string): T | null => {\n  // Get document, or throw exception on error\n  try {\n    const document = load(yamlString);\n    return document as T;\n  } catch (e: any) {\n    // console.log(\"failed parsing yaml\", e?.message);\n    return null;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/tryParseYamlToJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/tryParseYamlToJson.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/tryParseYamlToJson.ts",
      "name": "NamedParameters<typeof tryParseYamlToJson>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/tryParseYamlToJson.ts",
      "operationRelativePath": "src/plugin/tryParseYamlToJson.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseYamlToJson%3E",
        "definitions": {
          "NamedParameters<typeof tryParseYamlToJson>": {
            "type": "object",
            "properties": {
              "yamlString": {
                "type": "string"
              }
            },
            "required": [
              "yamlString"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "yamlString",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchPlugin",
    "start": 0,
    "end": 189,
    "length": 189,
    "raw": "export const fetchPlugin = async (\n  details: {\n    apiUrl: string;\n    method: string;\n    headers: any;\n  },\n  completeContext: any,\n): Promise<any> => {\n  //do the fetch;\n  return 90;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchPlugin.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchPlugin.ts",
      "name": "NamedParameters<typeof fetchPlugin>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchPlugin.ts",
      "operationRelativePath": "src/plugin/fetchPlugin.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchPlugin%3E",
        "definitions": {
          "NamedParameters<typeof fetchPlugin>": {
            "type": "object",
            "properties": {
              "details": {
                "type": "object",
                "properties": {
                  "apiUrl": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string"
                  },
                  "headers": {}
                },
                "required": [
                  "apiUrl",
                  "method",
                  "headers"
                ],
                "additionalProperties": false
              },
              "completeContext": {}
            },
            "required": [
              "details",
              "completeContext"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "details",
        "schema": {
          "type": "object",
          "properties": {
            "apiUrl": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "headers": {}
          },
          "required": [
            "apiUrl",
            "method",
            "headers"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "apiUrl",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "method",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "headers",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "completeContext",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcVariable",
    "name": "openapis",
    "start": 121,
    "end": 177,
    "length": 56,
    "raw": "const openapis: { [url: string]: OpenAPIDocument } = {};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchOpenapi",
    "start": 217,
    "end": 887,
    "length": 670,
    "raw": "export const fetchOpenapi = async (openapiUrl: string | undefined) => {\n  if (!openapiUrl) {\n    return;\n  }\n\n  if (openapis[openapiUrl]) {\n    // NB: cached in memory\n    return openapis[openapiUrl];\n  }\n\n  const isYaml = openapiUrl.endsWith(\".yaml\");\n\n  const { json, status, statusText, text } =\n    await fetchWithTimeout<OpenAPIDocument>(\n      openapiUrl,\n      {\n        headers: isYaml\n          ? undefined\n          : {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n      },\n      30000,\n    );\n\n  if (json) {\n    // NB: set cache\n    openapis[openapiUrl] = json;\n  }\n\n  return json || undefined;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
      "name": "NamedParameters<typeof fetchOpenapi>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchOpenapi.ts",
      "operationRelativePath": "src/plugin/fetchOpenapi.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchOpenapi%3E",
        "definitions": {
          "NamedParameters<typeof fetchOpenapi>": {
            "type": "object",
            "properties": {
              "openapiUrl": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "openapiUrl",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcInterface",
    "name": "ValueOptions",
    "start": 505,
    "end": 1222,
    "raw": "export type ValueOptions = {\n  /**\n   * If true, will replace the object rather than overwriting it where needed.\n   *\n   * By default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.\n   */\n  objectReplace?: boolean;\n  /**\n  If true, will replace items in the array fully.\n  \n  By default, ActionSchema will insert into an array with an optional discriminator (see below).\n  */\n  arrayReplace?: boolean;\n\n  /**\n   * If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.\n   */\n  arrayDiscriminatorPropertyKey?: string;\n};",
    "length": 717,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "objectReplace": {
            "type": "boolean",
            "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
          },
          "arrayReplace": {
            "type": "boolean",
            "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
          },
          "arrayDiscriminatorPropertyKey": {
            "type": "string",
            "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
          }
        },
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "objectReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.",
              "type": "boolean"
            }
          },
          {
            "name": "arrayReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below).",
              "type": "boolean"
            }
          },
          {
            "name": "arrayDiscriminatorPropertyKey",
            "required": false,
            "schema": {
              "fullComment": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.",
              "type": "string"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "EnvironmentConfig",
    "start": 1822,
    "end": 2429,
    "raw": "export type EnvironmentConfig = {\n  /** Function to recurse on dependants. */\n  recurseFunction: (context: ExecuteContext) => any;\n  /** Set or remove a status.  */\n  setStatus: (key: string, value: string | null) => Promise<void>;\n  /** Get a status */\n  getStatus: (key: string, value: string) => Promise<string>;\n  setData: (key: string, value: any) => Promise<void>;\n  getData: (key: string) => Promise<any>;\n  /** Can be different in environments */\n  fetchPlugin: (\n    details: {\n      apiUrl: string;\n      method: string;\n      headers: any;\n    },\n    completeContext: any,\n  ) => Promise<any>;\n};",
    "length": 607,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "recurseFunction": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Function to recurse on dependants."
          },
          "setStatus": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Set or remove a status."
          },
          "getStatus": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Get a status"
          },
          "setData": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            }
          },
          "getData": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            }
          },
          "fetchPlugin": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Can be different in environments"
          }
        },
        "required": [
          "recurseFunction",
          "setStatus",
          "getStatus",
          "setData",
          "getData",
          "fetchPlugin"
        ],
        "additionalProperties": false,
        "description": "The main 3 environments I want to be supporting are:\n\n- server (Users state is all in the server - can be a homeserver)\n- serverless (Users state is stored in some DB)\n- browser (Users state stays with the user)\n\nThe browser is the most scalable one, but is limited as it cannot easily receive callbacks and needs to remain online at all times. On the other hand, the server is the least scalable and hardest to set up, but has no limitations.\n\nThe goal is to share as much code as possible between the three environments, and open source at least the browser variant to get some eyeballs."
      },
      "simplifiedSchema": {
        "fullComment": "The main 3 environments I want to be supporting are:\n\n- server (Users state is all in the server - can be a homeserver)\n- serverless (Users state is stored in some DB)\n- browser (Users state stays with the user)\n\nThe browser is the most scalable one, but is limited as it cannot easily receive callbacks and needs to remain online at all times. On the other hand, the server is the least scalable and hardest to set up, but has no limitations.\n\nThe goal is to share as much code as possible between the three environments, and open source at least the browser variant to get some eyeballs.",
        "properties": [
          {
            "name": "recurseFunction",
            "required": true,
            "schema": {
              "fullComment": "Function to recurse on dependants.",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "setStatus",
            "required": true,
            "schema": {
              "fullComment": "Set or remove a status.",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "getStatus",
            "required": true,
            "schema": {
              "fullComment": "Get a status",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "setData",
            "required": true,
            "schema": {
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "getData",
            "required": true,
            "schema": {
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "fetchPlugin",
            "required": true,
            "schema": {
              "fullComment": "Can be different in environments",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "ExecuteContext",
    "start": 2430,
    "end": 2918,
    "raw": "export type ExecuteContext = {\n  schema: ActionSchema;\n  /** Data dotlocation */\n  dotLocation: string;\n  databaseId: string;\n  value?: any;\n  /** If true, skips executing the plugin */\n  skipPlugin?: boolean;\n  /** If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution. */\n  returnDotLocation?: string;\n  /** An url to be called back on with updates */\n  updateCallbackUrl?: string;\n  actionSchemaPlugins: ActionSchemaPlugin[];\n};",
    "length": 488,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/definitions/ActionSchema"
          },
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {},
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchemaPlugin"
            }
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "schema",
            "required": true,
            "schema": {
              "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
              "properties": [
                {
                  "name": "x-grid-items-location",
                  "required": false,
                  "schema": {
                    "fullComment": "Useful at root. Dot-notation of where to find the items.",
                    "type": "string"
                  }
                },
                {
                  "name": "x-is-public",
                  "required": false,
                  "schema": {
                    "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                    "type": "boolean"
                  }
                },
                {
                  "name": "x-plugin",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "deprecated",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "ui:widget",
                  "required": false,
                  "schema": {
                    "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                    "type": "string"
                  }
                },
                {
                  "name": "ui:options",
                  "required": false,
                  "schema": {
                    "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                    "properties": [
                      {
                        "name": "refModelName",
                        "required": false,
                        "schema": {
                          "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                          "type": "string"
                        }
                      }
                    ],
                    "type": "object"
                  }
                },
                {
                  "name": "$id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "$source",
                  "required": false,
                  "schema": {
                    "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                    "type": "string"
                  }
                },
                {
                  "name": "$schema",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "$ref",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "$comment",
                  "required": false,
                  "schema": {
                    "fullComment": "Comment for the makers of the schema",
                    "type": "string"
                  }
                },
                {
                  "name": "title",
                  "required": false,
                  "schema": {
                    "fullComment": "In the form this shows up as the title for the property. More readable.",
                    "type": "string"
                  }
                },
                {
                  "name": "description",
                  "required": false,
                  "schema": {
                    "fullComment": "Description for schema at this location",
                    "type": "string"
                  }
                },
                {
                  "name": "default",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "readOnly",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "writeOnly",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "examples",
                  "required": false,
                  "schema": {
                    "items": [
                      {
                        "schema": {
                          "properties": [],
                          "type": "object"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "multipleOf",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "maximum",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "exclusiveMaximum",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "minimum",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "exclusiveMinimum",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "name": "maxLength",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "minLength",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "pattern",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "additionalItems",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "items",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "maxItems",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "minItems",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "uniqueItems",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "name": "contains",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "maxProperties",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "minProperties",
                  "required": false,
                  "schema": {
                    "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                    "type": "number"
                  }
                },
                {
                  "name": "required",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "items": [
                      {
                        "schema": {
                          "type": "string"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "additionalProperties",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "definitions",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "properties",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "patternProperties",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "dependencies",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "propertyNames",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "const",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "enum",
                  "required": false,
                  "schema": {
                    "items": [
                      {
                        "schema": {
                          "properties": [],
                          "type": "object"
                        },
                        "name": null
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "type",
                  "required": false,
                  "schema": {
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "format",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contentMediaType",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "contentEncoding",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "if",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "then",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "else",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                },
                {
                  "name": "allOf",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "ActionSchema",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "ActionSchema"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "anyOf",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "ActionSchema",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "ActionSchema"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "oneOf",
                  "required": false,
                  "schema": {
                    "fullComment": "",
                    "items": [
                      {
                        "schema": {
                          "circularRefName": "ActionSchema",
                          "properties": [],
                          "type": "object"
                        },
                        "name": "ActionSchema"
                      }
                    ],
                    "type": "array"
                  }
                },
                {
                  "name": "not",
                  "required": false,
                  "schema": {
                    "circularRefName": "ActionSchema",
                    "properties": [],
                    "type": "object"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "dotLocation",
            "required": true,
            "schema": {
              "fullComment": "Data dotlocation",
              "type": "string"
            }
          },
          {
            "name": "databaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": false,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "skipPlugin",
            "required": false,
            "schema": {
              "fullComment": "If true, skips executing the plugin",
              "type": "boolean"
            }
          },
          {
            "name": "returnDotLocation",
            "required": false,
            "schema": {
              "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
              "type": "string"
            }
          },
          {
            "name": "updateCallbackUrl",
            "required": false,
            "schema": {
              "fullComment": "An url to be called back on with updates",
              "type": "string"
            }
          },
          {
            "name": "actionSchemaPlugins",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "fullComment": "",
                    "properties": [
                      {
                        "name": "__id",
                        "required": false,
                        "schema": {
                          "fullComment": "The entire URL should be here",
                          "type": "string"
                        }
                      },
                      {
                        "name": "headers",
                        "required": false,
                        "schema": {
                          "type": "string"
                        }
                      },
                      {
                        "name": "localhostOpenapiUrl",
                        "required": false,
                        "schema": {
                          "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                          "type": "string"
                        }
                      },
                      {
                        "name": "isInternallyHosted",
                        "required": false,
                        "schema": {
                          "fullComment": "If true, this indicates we should always use localhost, even in production.",
                          "type": "boolean"
                        }
                      }
                    ],
                    "type": "object"
                  },
                  "name": "ActionSchemaPlugin"
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "execute",
    "start": 3628,
    "end": 6849,
    "length": 3221,
    "raw": "export const execute = async (context: ExecuteContext & EnvironmentConfig) => {\n  const {\n    dotLocation,\n    schema,\n    databaseId,\n    value,\n    skipPlugin,\n    returnDotLocation,\n    recurseFunction,\n    getData,\n    getStatus,\n    setData,\n    setStatus,\n    updateCallbackUrl,\n    actionSchemaPlugins,\n  } = context;\n\n  // Set `busy` status (to not conflict with spawner)\n  await setStatus(dotLocation, \"busy\");\n  let setValueResult: undefined | { isSuccessful: boolean; message: string } =\n    undefined;\n\n  if (value !== undefined) {\n    //===== Set a new value into the db (Optional, if given)\n    await setData(dotLocation, value);\n  }\n\n  //===== Looks at the schema and relevant existing data\n  const completeContext = {};\n\n  //===== Gathers the context\n  const workerContext: WorkerContext = {\n    completeContext,\n    dotLocation,\n    schema,\n    databaseId,\n  };\n\n  //====== Executes the plugin\n  const plugins = getSchemaAtDotLocation(schema, dotLocation)[\"x-plugin\"];\n\n  // NB: for now, always the first\n  const plugin = Array.isArray(plugins) ? plugins[0] : plugins;\n\n  if (!plugin || skipPlugin) {\n    return (\n      setValueResult || {\n        isSuccessful: true,\n        message: \"Did not set any value, did not execute any plugin\",\n      }\n    );\n  }\n  //====== Gathers authorization info\n\n  const $openapi = plugin.$openapi;\n\n  const details = await getOpenapiDetails($openapi, actionSchemaPlugins);\n\n  if (!details) {\n    await setStatus(dotLocation, null);\n\n    return {\n      isSuccessful: false,\n      message: \"Could not find openapi details\",\n    };\n  }\n\n  //===== Executes the plugin\n\n  const newValue = await fetchPlugin(details, completeContext);\n\n  //===== Updates the data with the result\n  // const values = flatten(newValue);\n  await setData(dotLocation, newValue);\n  const setNewValueResult = { isSuccessful: true, message: \"Set the value\" };\n\n  //======= Remove `busy` status\n  await setStatus(dotLocation, null);\n\n  //=== Look at other columns that have this dotLocation in `propertyDependencies`, Set those status to `stale`\n\n  // This would be one level up, so the entire object\n  const baseDotLocation = getDotLocationBase(dotLocation);\n\n  // Look at other columns that have this datapoint in `propertyDependencies`\n  const properties =\n    getSchemaAtDotLocation(schema, baseDotLocation).properties || {};\n\n  const dependantKeys = Object.keys(properties).filter((key) => {\n    const schema = properties[key];\n    const plugin = Array.isArray(schema[\"x-plugin\"])\n      ? schema[\"x-plugin\"][0]\n      : schema[\"x-plugin\"];\n\n    const isDependant = plugin?.propertyDependencies?.includes(dotLocation);\n    return isDependant;\n  });\n\n  // Set those status to `stale`\n  const dependantDotLocations = dependantKeys.map((k) =>\n    getDotLocationBase(dotLocation, k),\n  );\n\n  await Promise.all(\n    dependantDotLocations.map(async (dotLocation) => {\n      await setStatus(dotLocation, \"stale\");\n    }),\n  );\n\n  //====== Try to execute `executeGridPlugin` for dependants directly incase available. (No probem if it fails)\n  dependantDotLocations.map((dotLocation) => {\n    // NB: Don't wait for this\n    recurseFunction({ ...context, dotLocation });\n  });\n\n  return setNewValueResult;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "ActionSchema": {
        "type": "object",
        "properties": {
          "x-grid-items-location": {
            "type": "string",
            "description": "Useful at root. Dot-notation of where to find the items."
          },
          "x-is-public": {
            "type": "boolean",
            "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
          },
          "x-plugin": {
            "anyOf": [
              {
                "$ref": "#/definitions/Plugin"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Plugin"
                }
              }
            ]
          },
          "deprecated": {
            "type": "boolean"
          },
          "ui:widget": {
            "type": "string",
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "ui:options": {
            "type": "object",
            "properties": {
              "refModelName": {
                "type": "string",
                "description": "If given, it is assumed the value or values of this property link to this model."
              }
            },
            "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
          },
          "$id": {
            "type": "string"
          },
          "$source": {
            "type": "string",
            "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
          },
          "$schema": {
            "type": "string"
          },
          "$ref": {
            "type": "string"
          },
          "$comment": {
            "type": "string",
            "description": "Comment for the makers of the schema"
          },
          "title": {
            "type": "string",
            "description": "In the form this shows up as the title for the property. More readable."
          },
          "description": {
            "type": "string",
            "description": "Description for schema at this location"
          },
          "default": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "writeOnly": {
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {}
          },
          "multipleOf": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": [
              "number",
              "boolean"
            ]
          },
          "maxLength": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minLength": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "pattern": {
            "type": "string"
          },
          "additionalItems": {
            "$ref": "#/definitions/ActionSchema"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "$ref": "#/definitions/SchemaArray"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "maxItems": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minItems": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "uniqueItems": {
            "type": "boolean"
          },
          "contains": {
            "$ref": "#/definitions/ActionSchema"
          },
          "maxProperties": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "minProperties": {
            "$ref": "#/definitions/NonNegativeIntegerDefault0"
          },
          "required": {
            "$ref": "#/definitions/StringArray"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "patternProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/StringArray"
                }
              ]
            }
          },
          "propertyNames": {
            "$ref": "#/definitions/ActionSchema"
          },
          "const": {
            "anyOf": [
              {
                "$ref": "#/definitions/ActionSchema"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "enum": {
            "type": "array",
            "items": {},
            "minItems": 1
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/definitions/SimpleTypes"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SimpleTypes"
                },
                "minItems": 1
              }
            ]
          },
          "format": {
            "type": "string"
          },
          "contentMediaType": {
            "type": "string"
          },
          "contentEncoding": {
            "type": "string"
          },
          "if": {
            "$ref": "#/definitions/ActionSchema"
          },
          "then": {
            "$ref": "#/definitions/ActionSchema"
          },
          "else": {
            "$ref": "#/definitions/ActionSchema"
          },
          "allOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "anyOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "oneOf": {
            "$ref": "#/definitions/SchemaArray"
          },
          "not": {
            "$ref": "#/definitions/ActionSchema"
          }
        },
        "additionalProperties": false,
        "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Could be used to auto-describe the usage of this plugin"
          },
          "summary": {
            "type": "string",
            "description": "Could be used to auto-summarise the usage of this plugin"
          },
          "isGridDataProvided": {
            "type": "boolean",
            "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
          },
          "concatenateArray": {
            "type": "boolean",
            "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
          },
          "$openapi": {
            "$ref": "#/definitions/OpenAPIDetails"
          },
          "condition": {
            "type": "string",
            "description": "If given, must resolve to true in order to run this function"
          },
          "outputLocation": {
            "type": "string",
            "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
          },
          "isVerticalExpandEnabled": {
            "type": "boolean",
            "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
          },
          "isAutoExecuteDisabled": {
            "type": "boolean",
            "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
          },
          "context": {
            "type": "object",
            "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
          },
          "propertyDependencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
          },
          "priceCredit": {
            "type": "number",
            "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
          },
          "code": {
            "type": "string",
            "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
          },
          "onChangeDependantBehavior": {
            "type": "string",
            "enum": [
              "ignore",
              "stale",
              "reset",
              "delete"
            ],
            "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
          },
          "stalePropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
          },
          "validPropertyName": {
            "type": "string",
            "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
          }
        },
        "description": "ActionSchema plugin"
      },
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "NonNegativeInteger": {
        "type": "number",
        "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
      },
      "NonNegativeIntegerDefault0": {
        "$ref": "#/definitions/NonNegativeInteger"
      },
      "SchemaArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ActionSchema"
        },
        "minItems": 1
      },
      "StringArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SimpleTypes": {
        "type": "string",
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "ActionSchemaPlugin": {
        "type": "object",
        "properties": {
          "__id": {
            "type": "string",
            "description": "The entire URL should be here"
          },
          "headers": {
            "type": "string"
          },
          "localhostOpenapiUrl": {
            "type": "string",
            "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
          },
          "isInternallyHosted": {
            "type": "boolean",
            "description": "If true, this indicates we should always use localhost, even in production."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/execute.ts",
      "name": "NamedParameters<typeof execute>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/execute.ts",
      "operationRelativePath": "src/plugin/execute.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20execute%3E",
        "definitions": {
          "NamedParameters<typeof execute>": {
            "type": "object",
            "properties": {
              "context": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "recurseFunction": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Function to recurse on dependants."
                  },
                  "setStatus": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Set or remove a status."
                  },
                  "getStatus": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Get a status"
                  },
                  "setData": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  "getData": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  "fetchPlugin": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Can be different in environments"
                  },
                  "schema": {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  "dotLocation": {
                    "type": "string",
                    "description": "Data dotlocation"
                  },
                  "databaseId": {
                    "type": "string"
                  },
                  "value": {},
                  "skipPlugin": {
                    "type": "boolean",
                    "description": "If true, skips executing the plugin"
                  },
                  "returnDotLocation": {
                    "type": "string",
                    "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
                  },
                  "updateCallbackUrl": {
                    "type": "string",
                    "description": "An url to be called back on with updates"
                  },
                  "actionSchemaPlugins": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ActionSchemaPlugin"
                    }
                  }
                },
                "required": [
                  "actionSchemaPlugins",
                  "databaseId",
                  "dotLocation",
                  "fetchPlugin",
                  "getData",
                  "getStatus",
                  "recurseFunction",
                  "schema",
                  "setData",
                  "setStatus"
                ]
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ActionSchema": {
            "type": "object",
            "properties": {
              "x-grid-items-location": {
                "type": "string",
                "description": "Useful at root. Dot-notation of where to find the items."
              },
              "x-is-public": {
                "type": "boolean",
                "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
              },
              "x-plugin": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Plugin"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Plugin"
                    }
                  }
                ]
              },
              "deprecated": {
                "type": "boolean"
              },
              "ui:widget": {
                "type": "string",
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "ui:options": {
                "type": "object",
                "properties": {
                  "refModelName": {
                    "type": "string",
                    "description": "If given, it is assumed the value or values of this property link to this model."
                  }
                },
                "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
              },
              "$id": {
                "type": "string"
              },
              "$source": {
                "type": "string",
                "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
              },
              "$schema": {
                "type": "string"
              },
              "$ref": {
                "type": "string"
              },
              "$comment": {
                "type": "string",
                "description": "Comment for the makers of the schema"
              },
              "title": {
                "type": "string",
                "description": "In the form this shows up as the title for the property. More readable."
              },
              "description": {
                "type": "string",
                "description": "Description for schema at this location"
              },
              "default": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array",
                    "items": {}
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "readOnly": {
                "type": "boolean"
              },
              "writeOnly": {
                "type": "boolean"
              },
              "examples": {
                "type": "array",
                "items": {}
              },
              "multipleOf": {
                "type": "number"
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "number"
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": [
                  "number",
                  "boolean"
                ]
              },
              "maxLength": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minLength": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "pattern": {
                "type": "string"
              },
              "additionalItems": {
                "$ref": "#/definitions/ActionSchema"
              },
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/SchemaArray"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "maxItems": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minItems": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "uniqueItems": {
                "type": "boolean"
              },
              "contains": {
                "$ref": "#/definitions/ActionSchema"
              },
              "maxProperties": {
                "$ref": "#/definitions/NonNegativeInteger"
              },
              "minProperties": {
                "$ref": "#/definitions/NonNegativeIntegerDefault0"
              },
              "required": {
                "$ref": "#/definitions/StringArray"
              },
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "definitions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "patternProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/ActionSchema"
                }
              },
              "dependencies": {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ActionSchema"
                    },
                    {
                      "$ref": "#/definitions/StringArray"
                    }
                  ]
                }
              },
              "propertyNames": {
                "$ref": "#/definitions/ActionSchema"
              },
              "const": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1
              },
              "type": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimpleTypes"
                    },
                    "minItems": 1
                  }
                ]
              },
              "format": {
                "type": "string"
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "if": {
                "$ref": "#/definitions/ActionSchema"
              },
              "then": {
                "$ref": "#/definitions/ActionSchema"
              },
              "else": {
                "$ref": "#/definitions/ActionSchema"
              },
              "allOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "anyOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "oneOf": {
                "$ref": "#/definitions/SchemaArray"
              },
              "not": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "additionalProperties": false,
            "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
          },
          "Plugin": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Could be used to auto-describe the usage of this plugin"
              },
              "summary": {
                "type": "string",
                "description": "Could be used to auto-summarise the usage of this plugin"
              },
              "isGridDataProvided": {
                "type": "boolean",
                "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
              },
              "concatenateArray": {
                "type": "boolean",
                "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
              },
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "condition": {
                "type": "string",
                "description": "If given, must resolve to true in order to run this function"
              },
              "outputLocation": {
                "type": "string",
                "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
              },
              "isVerticalExpandEnabled": {
                "type": "boolean",
                "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
              },
              "isAutoExecuteDisabled": {
                "type": "boolean",
                "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
              },
              "context": {
                "type": "object",
                "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
              },
              "propertyDependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
              },
              "priceCredit": {
                "type": "number",
                "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
              },
              "code": {
                "type": "string",
                "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
              },
              "onChangeDependantBehavior": {
                "type": "string",
                "enum": [
                  "ignore",
                  "stale",
                  "reset",
                  "delete"
                ],
                "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
              },
              "stalePropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
              },
              "validPropertyName": {
                "type": "string",
                "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
              }
            },
            "description": "ActionSchema plugin"
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "NonNegativeInteger": {
            "type": "number",
            "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
          },
          "NonNegativeIntegerDefault0": {
            "$ref": "#/definitions/NonNegativeInteger"
          },
          "SchemaArray": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ActionSchema"
            },
            "minItems": 1
          },
          "StringArray": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SimpleTypes": {
            "type": "string",
            "enum": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          "ActionSchemaPlugin": {
            "type": "object",
            "properties": {
              "__id": {
                "type": "string",
                "description": "The entire URL should be here"
              },
              "headers": {
                "type": "string"
              },
              "localhostOpenapiUrl": {
                "type": "string",
                "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
              },
              "isInternallyHosted": {
                "type": "boolean",
                "description": "If true, this indicates we should always use localhost, even in production."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "recurseFunction": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Function to recurse on dependants."
            },
            "setStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Set or remove a status."
            },
            "getStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Get a status"
            },
            "setData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "getData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "fetchPlugin": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Can be different in environments"
            },
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {},
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionSchemaPlugin"
              }
            }
          },
          "required": [
            "actionSchemaPlugins",
            "databaseId",
            "dotLocation",
            "fetchPlugin",
            "getData",
            "getStatus",
            "recurseFunction",
            "schema",
            "setData",
            "setStatus"
          ]
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "recurseFunction",
              "required": true,
              "schema": {
                "fullComment": "Function to recurse on dependants.",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "setStatus",
              "required": true,
              "schema": {
                "fullComment": "Set or remove a status.",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "getStatus",
              "required": true,
              "schema": {
                "fullComment": "Get a status",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "setData",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "getData",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "fetchPlugin",
              "required": true,
              "schema": {
                "fullComment": "Can be different in environments",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "schema",
              "required": true,
              "schema": {
                "fullComment": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#",
                "properties": [
                  {
                    "name": "x-grid-items-location",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. Dot-notation of where to find the items.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "x-is-public",
                    "required": false,
                    "schema": {
                      "fullComment": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy.",
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "x-plugin",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "deprecated",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "ui:widget",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "type": "string"
                    }
                  },
                  {
                    "name": "ui:options",
                    "required": false,
                    "schema": {
                      "fullComment": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/",
                      "properties": [
                        {
                          "name": "refModelName",
                          "required": false,
                          "schema": {
                            "fullComment": "If given, it is assumed the value or values of this property link to this model.",
                            "type": "string"
                          }
                        }
                      ],
                      "type": "object"
                    }
                  },
                  {
                    "name": "$id",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$source",
                    "required": false,
                    "schema": {
                      "fullComment": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "$schema",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$ref",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "$comment",
                    "required": false,
                    "schema": {
                      "fullComment": "Comment for the makers of the schema",
                      "type": "string"
                    }
                  },
                  {
                    "name": "title",
                    "required": false,
                    "schema": {
                      "fullComment": "In the form this shows up as the title for the property. More readable.",
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "required": false,
                    "schema": {
                      "fullComment": "Description for schema at this location",
                      "type": "string"
                    }
                  },
                  {
                    "name": "default",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "readOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "writeOnly",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "examples",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "multipleOf",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMaximum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "minimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "exclusiveMinimum",
                    "required": false,
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minLength",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "pattern",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "additionalItems",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "items",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minItems",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "uniqueItems",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  },
                  {
                    "name": "contains",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "maxProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "minProperties",
                    "required": false,
                    "schema": {
                      "fullComment": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file.",
                      "type": "number"
                    }
                  },
                  {
                    "name": "required",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "additionalProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "definitions",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "properties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "patternProperties",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "dependencies",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "propertyNames",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "const",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "enum",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "properties": [],
                            "type": "object"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "type",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "format",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentMediaType",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "contentEncoding",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "if",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "then",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "else",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "allOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "anyOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "oneOf",
                    "required": false,
                    "schema": {
                      "fullComment": "",
                      "items": [
                        {
                          "schema": {
                            "circularRefName": "ActionSchema",
                            "properties": [],
                            "type": "object"
                          },
                          "name": "ActionSchema"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  {
                    "name": "not",
                    "required": false,
                    "schema": {
                      "circularRefName": "ActionSchema",
                      "properties": [],
                      "type": "object"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "fullComment": "",
                      "properties": [
                        {
                          "name": "__id",
                          "required": false,
                          "schema": {
                            "fullComment": "The entire URL should be here",
                            "type": "string"
                          }
                        },
                        {
                          "name": "headers",
                          "required": false,
                          "schema": {
                            "type": "string"
                          }
                        },
                        {
                          "name": "localhostOpenapiUrl",
                          "required": false,
                          "schema": {
                            "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                            "type": "string"
                          }
                        },
                        {
                          "name": "isInternallyHosted",
                          "required": false,
                          "schema": {
                            "fullComment": "If true, this indicates we should always use localhost, even in production.",
                            "type": "boolean"
                          }
                        }
                      ],
                      "type": "object"
                    },
                    "name": "ActionSchemaPlugin"
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getOpenapiDetails",
    "start": 281,
    "end": 2049,
    "length": 1768,
    "raw": "export const getOpenapiDetails = async (\n  $openapi: OpenAPIDetails | undefined,\n  actionSchemaPlugins: ActionSchemaPlugin[] | undefined,\n) => {\n  if (!$openapi) {\n    console.log(\"getOpenApiDetails: NO $OPENAPI DETAILS On the plugin\");\n    return;\n  }\n\n  const url = new URL($openapi.url);\n\n  if (!url) {\n    console.log(\"getOpenApiDetails: NO URL\");\n    return;\n  }\n\n  const exactPlugin = actionSchemaPlugins?.find((x) => x.__id === $openapi.url);\n  const plugin = exactPlugin\n    ? exactPlugin\n    : // NB: Temporary Exception\n    $openapi.url === \"https://root.actionschema.com/openapi.json\"\n    ? actionSchemaPlugins?.find((x) =>\n        x.__id?.endsWith(\".actionschema.com/openapi.json\"),\n      )\n    : undefined;\n\n  if (!plugin) {\n    console.log(\"getOpenApiDetails: Plugin couldn't be found\", {\n      actionSchemaPlugins,\n      urlToMatchId: $openapi.url,\n      plugin,\n    });\n    return;\n  }\n\n  const headers = plugin.headers as any;\n\n  if (!headers) {\n    console.log(\"getOpenApiDetails: Headers couldn't be found\", {\n      actionSchemaPlugins,\n      urlToMatchId: $openapi.url,\n      headers,\n    });\n    return;\n  }\n\n  const isDev = process.env.IS_DEV === \"true\";\n\n  const realOpenapiUrl =\n    (isDev || plugin.isInternallyHosted) &&\n    plugin.localhostOpenapiUrl &&\n    plugin.localhostOpenapiUrl !== \"\"\n      ? plugin.localhostOpenapiUrl\n      : $openapi.url;\n\n  const openapi = await fetchOpenapi(realOpenapiUrl);\n\n  if (!openapi) {\n    console.log(\"getOpenApiDetails: OpenAPI Not available\", realOpenapiUrl);\n  }\n\n  // Server origin url including '/'\n  const serverOriginUrl = openapi?.servers?.[0]?.url || url.origin;\n\n  const apiUrl = `${serverOriginUrl}${$openapi.path}`;\n  const method = $openapi.method;\n\n  return { apiUrl, method, headers };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/getOpenapiDetails.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/getOpenapiDetails.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "ActionSchemaPlugin": {
        "type": "object",
        "properties": {
          "__id": {
            "type": "string",
            "description": "The entire URL should be here"
          },
          "headers": {
            "type": "string"
          },
          "localhostOpenapiUrl": {
            "type": "string",
            "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
          },
          "isInternallyHosted": {
            "type": "boolean",
            "description": "If true, this indicates we should always use localhost, even in production."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/getOpenapiDetails.ts",
      "name": "NamedParameters<typeof getOpenapiDetails>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/getOpenapiDetails.ts",
      "operationRelativePath": "src/plugin/getOpenapiDetails.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getOpenapiDetails%3E",
        "definitions": {
          "NamedParameters<typeof getOpenapiDetails>": {
            "type": "object",
            "properties": {
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActionSchemaPlugin"
                }
              }
            },
            "additionalProperties": false
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "ActionSchemaPlugin": {
            "type": "object",
            "properties": {
              "__id": {
                "type": "string",
                "description": "The entire URL should be here"
              },
              "headers": {
                "type": "string"
              },
              "localhostOpenapiUrl": {
                "type": "string",
                "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
              },
              "isInternallyHosted": {
                "type": "boolean",
                "description": "If true, this indicates we should always use localhost, even in production."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "$openapi",
        "schema": {
          "$ref": "#/definitions/OpenAPIDetails"
        },
        "simplifiedSchema": {
          "fullComment": "The OpenAPI information required to execute the function.",
          "properties": [
            {
              "name": "url",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "method",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "operationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "emoji",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "actionSchemaPlugins",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchemaPlugin"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "__id",
                    "required": false,
                    "schema": {
                      "fullComment": "The entire URL should be here",
                      "type": "string"
                    }
                  },
                  {
                    "name": "headers",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "localhostOpenapiUrl",
                    "required": false,
                    "schema": {
                      "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                      "type": "string"
                    }
                  },
                  {
                    "name": "isInternallyHosted",
                    "required": false,
                    "schema": {
                      "fullComment": "If true, this indicates we should always use localhost, even in production.",
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              },
              "name": "ActionSchemaPlugin"
            }
          ],
          "type": "array"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeStaleWatcher",
    "start": 0,
    "end": 50,
    "length": 50,
    "raw": "export const executeStaleWatcher = () => {\n  //\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/executeStaleWatcher.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/executeStaleWatcher.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/executeStaleWatcher.ts",
      "name": "NamedParameters<typeof executeStaleWatcher>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/executeStaleWatcher.ts",
      "operationRelativePath": "src/plugin/executeStaleWatcher.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeStaleWatcher%3E",
        "definitions": {
          "NamedParameters<typeof executeStaleWatcher>": {
            "type": "object",
            "additionalProperties": false
          }
        }
      }
    }
  },
  {
    "modelName": "SwcVariable",
    "name": "removeCommentsRegex",
    "start": 0,
    "end": 77,
    "length": 77,
    "raw": "const removeCommentsRegex = /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs"
  },
  {
    "modelName": "SwcFunction",
    "name": "tryParseJson",
    "start": 123,
    "end": 528,
    "length": 405,
    "raw": "export const tryParseJson = <T extends unknown>(\n  text: string,\n  logParseError?: boolean,\n): T | null => {\n  try {\n    const jsonStringWithoutComments = text.replace(\n      removeCommentsRegex,\n      (m, g) => (g ? \"\" : m),\n    );\n    return JSON.parse(jsonStringWithoutComments) as T;\n  } catch (parseError) {\n    if (logParseError) console.log(\"JSON Parse error:\", parseError);\n    return null;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
      "name": "NamedParameters<typeof tryParseJson>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/tryParseJson.ts",
      "operationRelativePath": "src/plugin/tryParseJson.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseJson%3E",
        "definitions": {
          "NamedParameters<typeof tryParseJson>": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              },
              "logParseError": {
                "type": "boolean"
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "text",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "logParseError",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchWithTimeout",
    "start": 260,
    "end": 745,
    "length": 485,
    "raw": "export const fetchWithTimeout = async <T extends any>(\n  input: string | Request | URL,\n  init?: RequestInit,\n  timeoutMs?: number,\n  isNoJson?: boolean,\n  isNoText?: boolean,\n) => {\n  const { status, statusText, text, response } = await fetchTextWithTimeout(\n    input,\n    init,\n    timeoutMs,\n    isNoText,\n  );\n  const json =\n    text && !isNoJson\n      ? tryParseJson<T>(text) || tryParseYamlToJson<T>(text)\n      : null;\n\n  return { text, json, status, statusText, response };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "Request": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
          },
          "bodyUsed": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
          },
          "destination": {
            "$ref": "#/definitions/RequestDestination",
            "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
          },
          "headers": {
            "$ref": "#/definitions/Headers",
            "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
          },
          "integrity": {
            "type": "string",
            "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
          },
          "keepalive": {
            "type": "boolean",
            "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
          },
          "method": {
            "type": "string",
            "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
          },
          "referrer": {
            "type": "string",
            "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
          },
          "signal": {
            "$ref": "#/definitions/AbortSignal",
            "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
          },
          "url": {
            "type": "string",
            "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
          }
        },
        "required": [
          "body",
          "bodyUsed",
          "cache",
          "credentials",
          "destination",
          "headers",
          "integrity",
          "keepalive",
          "method",
          "mode",
          "redirect",
          "referrer",
          "referrerPolicy",
          "signal",
          "url"
        ],
        "additionalProperties": false,
        "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
      },
      "ReadableStream<Uint8Array>": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "RequestCache": {
        "type": "string",
        "enum": [
          "default",
          "force-cache",
          "no-cache",
          "no-store",
          "only-if-cached",
          "reload"
        ]
      },
      "RequestCredentials": {
        "type": "string",
        "enum": [
          "include",
          "omit",
          "same-origin"
        ]
      },
      "RequestDestination": {
        "type": "string",
        "enum": [
          "",
          "audio",
          "audioworklet",
          "document",
          "embed",
          "font",
          "frame",
          "iframe",
          "image",
          "manifest",
          "object",
          "paintworklet",
          "report",
          "script",
          "sharedworker",
          "style",
          "track",
          "video",
          "worker",
          "xslt"
        ]
      },
      "Headers": {
        "type": "object",
        "additionalProperties": false
      },
      "RequestMode": {
        "type": "string",
        "enum": [
          "cors",
          "navigate",
          "no-cors",
          "same-origin"
        ]
      },
      "RequestRedirect": {
        "type": "string",
        "enum": [
          "error",
          "follow",
          "manual"
        ]
      },
      "ReferrerPolicy": {
        "type": "string",
        "enum": [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "origin",
          "origin-when-cross-origin",
          "same-origin",
          "strict-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ]
      },
      "AbortSignal": {
        "type": "object",
        "properties": {
          "aborted": {
            "type": "boolean",
            "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
          },
          "reason": {},
          "onabort": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "isFunction": {
                    "type": "boolean",
                    "const": true
                  }
                }
              }
            ]
          }
        },
        "required": [
          "aborted",
          "reason",
          "onabort"
        ],
        "additionalProperties": false,
        "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
      },
      "RequestInit": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/definitions/NextFetchRequestConfig"
          }
        },
        "additionalProperties": false
      },
      "NextFetchRequestConfig": {
        "type": "object",
        "properties": {
          "revalidate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean",
                "const": false
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
      "name": "NamedParameters<typeof fetchWithTimeout>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
      "operationRelativePath": "src/plugin/fetchWithTimeout.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchWithTimeout%3E",
        "definitions": {
          "NamedParameters<typeof fetchWithTimeout>": {
            "type": "object",
            "properties": {
              "input": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Request"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              },
              "init": {
                "$ref": "#/definitions/RequestInit"
              },
              "timeoutMs": {
                "type": "number"
              },
              "isNoJson": {
                "type": "boolean"
              },
              "isNoText": {
                "type": "boolean"
              }
            },
            "required": [
              "input"
            ],
            "additionalProperties": false
          },
          "Request": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
              },
              "bodyUsed": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
              },
              "destination": {
                "$ref": "#/definitions/RequestDestination",
                "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
              },
              "headers": {
                "$ref": "#/definitions/Headers",
                "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
              },
              "integrity": {
                "type": "string",
                "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
              },
              "keepalive": {
                "type": "boolean",
                "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
              },
              "method": {
                "type": "string",
                "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
              },
              "referrer": {
                "type": "string",
                "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
              },
              "signal": {
                "$ref": "#/definitions/AbortSignal",
                "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
              },
              "url": {
                "type": "string",
                "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
              }
            },
            "required": [
              "body",
              "bodyUsed",
              "cache",
              "credentials",
              "destination",
              "headers",
              "integrity",
              "keepalive",
              "method",
              "mode",
              "redirect",
              "referrer",
              "referrerPolicy",
              "signal",
              "url"
            ],
            "additionalProperties": false,
            "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
          },
          "ReadableStream<Uint8Array>": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "RequestCache": {
            "type": "string",
            "enum": [
              "default",
              "force-cache",
              "no-cache",
              "no-store",
              "only-if-cached",
              "reload"
            ]
          },
          "RequestCredentials": {
            "type": "string",
            "enum": [
              "include",
              "omit",
              "same-origin"
            ]
          },
          "RequestDestination": {
            "type": "string",
            "enum": [
              "",
              "audio",
              "audioworklet",
              "document",
              "embed",
              "font",
              "frame",
              "iframe",
              "image",
              "manifest",
              "object",
              "paintworklet",
              "report",
              "script",
              "sharedworker",
              "style",
              "track",
              "video",
              "worker",
              "xslt"
            ]
          },
          "Headers": {
            "type": "object",
            "additionalProperties": false
          },
          "RequestMode": {
            "type": "string",
            "enum": [
              "cors",
              "navigate",
              "no-cors",
              "same-origin"
            ]
          },
          "RequestRedirect": {
            "type": "string",
            "enum": [
              "error",
              "follow",
              "manual"
            ]
          },
          "ReferrerPolicy": {
            "type": "string",
            "enum": [
              "",
              "no-referrer",
              "no-referrer-when-downgrade",
              "origin",
              "origin-when-cross-origin",
              "same-origin",
              "strict-origin",
              "strict-origin-when-cross-origin",
              "unsafe-url"
            ]
          },
          "AbortSignal": {
            "type": "object",
            "properties": {
              "aborted": {
                "type": "boolean",
                "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
              },
              "reason": {},
              "onabort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  }
                ]
              }
            },
            "required": [
              "aborted",
              "reason",
              "onabort"
            ],
            "additionalProperties": false,
            "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
          },
          "RequestInit": {
            "type": "object",
            "properties": {
              "next": {
                "$ref": "#/definitions/NextFetchRequestConfig"
              }
            },
            "additionalProperties": false
          },
          "NextFetchRequestConfig": {
            "type": "object",
            "properties": {
              "revalidate": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean",
                    "const": false
                  }
                ]
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "input",
        "schema": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Request"
            },
            {
              "type": "string",
              "format": "uri"
            }
          ]
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "init",
        "schema": {
          "$ref": "#/definitions/RequestInit"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "next",
              "required": false,
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "revalidate",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "tags",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  }
                ],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "timeoutMs",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      },
      {
        "name": "isNoJson",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      },
      {
        "name": "isNoText",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchTextWithTimeout",
    "start": 747,
    "end": 1752,
    "length": 1005,
    "raw": "export const fetchTextWithTimeout = async (\n  input: string | Request | URL,\n  init?: RequestInit,\n  timeoutMs?: number,\n  isNoText?: boolean,\n) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs || 300000);\n\n    const response = await fetch(input, {\n      ...init,\n      signal: controller.signal,\n    }).catch((err: any) => {\n      console.log({ err });\n      // console.log(Object.keys(err.cause));\n      return err.cause.code as string; // Error caused by fetch\n    });\n\n    clearTimeout(timeoutId);\n\n    if (typeof response === \"string\") {\n      return { statusText: response };\n    }\n\n    const status = response?.status;\n    const statusText = response?.statusText;\n    // console.log({ status, statusText });\n    const text = isNoText ? undefined : await response.text();\n\n    return { text, status, statusText, response };\n  } catch (e) {\n    return { text: undefined, status: 500, statusText: \"Catched fetch\" };\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "cjs",
    "returnType": {},
    "otherDefs": {
      "Request": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
          },
          "bodyUsed": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
          },
          "destination": {
            "$ref": "#/definitions/RequestDestination",
            "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
          },
          "headers": {
            "$ref": "#/definitions/Headers",
            "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
          },
          "integrity": {
            "type": "string",
            "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
          },
          "keepalive": {
            "type": "boolean",
            "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
          },
          "method": {
            "type": "string",
            "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
          },
          "referrer": {
            "type": "string",
            "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
          },
          "signal": {
            "$ref": "#/definitions/AbortSignal",
            "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
          },
          "url": {
            "type": "string",
            "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
          }
        },
        "required": [
          "body",
          "bodyUsed",
          "cache",
          "credentials",
          "destination",
          "headers",
          "integrity",
          "keepalive",
          "method",
          "mode",
          "redirect",
          "referrer",
          "referrerPolicy",
          "signal",
          "url"
        ],
        "additionalProperties": false,
        "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
      },
      "ReadableStream<Uint8Array>": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "RequestCache": {
        "type": "string",
        "enum": [
          "default",
          "force-cache",
          "no-cache",
          "no-store",
          "only-if-cached",
          "reload"
        ]
      },
      "RequestCredentials": {
        "type": "string",
        "enum": [
          "include",
          "omit",
          "same-origin"
        ]
      },
      "RequestDestination": {
        "type": "string",
        "enum": [
          "",
          "audio",
          "audioworklet",
          "document",
          "embed",
          "font",
          "frame",
          "iframe",
          "image",
          "manifest",
          "object",
          "paintworklet",
          "report",
          "script",
          "sharedworker",
          "style",
          "track",
          "video",
          "worker",
          "xslt"
        ]
      },
      "Headers": {
        "type": "object",
        "additionalProperties": false
      },
      "RequestMode": {
        "type": "string",
        "enum": [
          "cors",
          "navigate",
          "no-cors",
          "same-origin"
        ]
      },
      "RequestRedirect": {
        "type": "string",
        "enum": [
          "error",
          "follow",
          "manual"
        ]
      },
      "ReferrerPolicy": {
        "type": "string",
        "enum": [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "origin",
          "origin-when-cross-origin",
          "same-origin",
          "strict-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ]
      },
      "AbortSignal": {
        "type": "object",
        "properties": {
          "aborted": {
            "type": "boolean",
            "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
          },
          "reason": {},
          "onabort": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "isFunction": {
                    "type": "boolean",
                    "const": true
                  }
                }
              }
            ]
          }
        },
        "required": [
          "aborted",
          "reason",
          "onabort"
        ],
        "additionalProperties": false,
        "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
      },
      "RequestInit": {
        "type": "object",
        "properties": {
          "next": {
            "$ref": "#/definitions/NextFetchRequestConfig"
          }
        },
        "additionalProperties": false
      },
      "NextFetchRequestConfig": {
        "type": "object",
        "properties": {
          "revalidate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "boolean",
                "const": false
              }
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
      "name": "NamedParameters<typeof fetchTextWithTimeout>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/plugin/fetchWithTimeout.ts",
      "operationRelativePath": "src/plugin/fetchWithTimeout.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchTextWithTimeout%3E",
        "definitions": {
          "NamedParameters<typeof fetchTextWithTimeout>": {
            "type": "object",
            "properties": {
              "input": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Request"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              },
              "init": {
                "$ref": "#/definitions/RequestInit"
              },
              "timeoutMs": {
                "type": "number"
              },
              "isNoText": {
                "type": "boolean"
              }
            },
            "required": [
              "input"
            ],
            "additionalProperties": false
          },
          "Request": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
              },
              "bodyUsed": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
              },
              "destination": {
                "$ref": "#/definitions/RequestDestination",
                "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
              },
              "headers": {
                "$ref": "#/definitions/Headers",
                "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
              },
              "integrity": {
                "type": "string",
                "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
              },
              "keepalive": {
                "type": "boolean",
                "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
              },
              "method": {
                "type": "string",
                "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
              },
              "referrer": {
                "type": "string",
                "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
              },
              "signal": {
                "$ref": "#/definitions/AbortSignal",
                "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
              },
              "url": {
                "type": "string",
                "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
              }
            },
            "required": [
              "body",
              "bodyUsed",
              "cache",
              "credentials",
              "destination",
              "headers",
              "integrity",
              "keepalive",
              "method",
              "mode",
              "redirect",
              "referrer",
              "referrerPolicy",
              "signal",
              "url"
            ],
            "additionalProperties": false,
            "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
          },
          "ReadableStream<Uint8Array>": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "RequestCache": {
            "type": "string",
            "enum": [
              "default",
              "force-cache",
              "no-cache",
              "no-store",
              "only-if-cached",
              "reload"
            ]
          },
          "RequestCredentials": {
            "type": "string",
            "enum": [
              "include",
              "omit",
              "same-origin"
            ]
          },
          "RequestDestination": {
            "type": "string",
            "enum": [
              "",
              "audio",
              "audioworklet",
              "document",
              "embed",
              "font",
              "frame",
              "iframe",
              "image",
              "manifest",
              "object",
              "paintworklet",
              "report",
              "script",
              "sharedworker",
              "style",
              "track",
              "video",
              "worker",
              "xslt"
            ]
          },
          "Headers": {
            "type": "object",
            "additionalProperties": false
          },
          "RequestMode": {
            "type": "string",
            "enum": [
              "cors",
              "navigate",
              "no-cors",
              "same-origin"
            ]
          },
          "RequestRedirect": {
            "type": "string",
            "enum": [
              "error",
              "follow",
              "manual"
            ]
          },
          "ReferrerPolicy": {
            "type": "string",
            "enum": [
              "",
              "no-referrer",
              "no-referrer-when-downgrade",
              "origin",
              "origin-when-cross-origin",
              "same-origin",
              "strict-origin",
              "strict-origin-when-cross-origin",
              "unsafe-url"
            ]
          },
          "AbortSignal": {
            "type": "object",
            "properties": {
              "aborted": {
                "type": "boolean",
                "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
              },
              "reason": {},
              "onabort": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  }
                ]
              }
            },
            "required": [
              "aborted",
              "reason",
              "onabort"
            ],
            "additionalProperties": false,
            "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
          },
          "RequestInit": {
            "type": "object",
            "properties": {
              "next": {
                "$ref": "#/definitions/NextFetchRequestConfig"
              }
            },
            "additionalProperties": false
          },
          "NextFetchRequestConfig": {
            "type": "object",
            "properties": {
              "revalidate": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean",
                    "const": false
                  }
                ]
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "input",
        "schema": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Request"
            },
            {
              "type": "string",
              "format": "uri"
            }
          ]
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "init",
        "schema": {
          "$ref": "#/definitions/RequestInit"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "next",
              "required": false,
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "revalidate",
                    "required": false,
                    "schema": {
                      "properties": [],
                      "type": "object"
                    }
                  },
                  {
                    "name": "tags",
                    "required": false,
                    "schema": {
                      "items": [
                        {
                          "schema": {
                            "type": "string"
                          },
                          "name": null
                        }
                      ],
                      "type": "array"
                    }
                  }
                ],
                "type": "object"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "timeoutMs",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      },
      {
        "name": "isNoText",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  }
]