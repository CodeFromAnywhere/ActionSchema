[
  {
    "modelName": "SwcFunction",
    "name": "executeBrowser",
    "start": 327,
    "end": 2269,
    "length": 1942,
    "raw": "export const executeBrowser = async (\n  context: ExecuteContext,\n): Promise<{\n  isSuccessful: boolean;\n  message: string;\n}> => {\n  const {\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n  } = context;\n\n  // 1) Init data and status dbs for this particular schema\n  const initDbSuccess = await initDb(databaseId);\n  const initStatusDbSuccess = await initDb(`status-${databaseId}`);\n\n  return execute({\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n    recurseFunction: (item) => {\n      return executeBrowser(item);\n    },\n\n    setData: async (key, value) => {\n      const putDataResult = await indexedDbPutData(databaseId, key, value);\n\n      // Super inefficient magic! After put, also set entire JSON to the local storage\n      const json = await indexedDbBuildObject(databaseId);\n      window.localStorage.setItem(\n        databaseId,\n        JSON.stringify(json, undefined, 2),\n      );\n\n      return putDataResult;\n    },\n\n    setStatus: async (key, value) => {\n      await indexedDbPutData(`status-${databaseId}`, key, value);\n      return;\n    },\n\n    fetchPlugin: async (details, completeContext) => {\n      // localhost for now\n      const host = `http://localhost:42000`;\n\n      // const url = new URL(details.apiUrl);\n      // const domainAndPath = url.host + url.pathname + url.search + url.hash;\n      return cleanFetch(\n        {\n          ...details,\n          //   apiUrl: `${host}/api/${domainAndPath}`,\n        },\n        completeContext,\n      );\n    },\n\n    getData: async (key) => {\n      const data = await indexedDbGetStoreItem(databaseId, key);\n      return data;\n    },\n\n    getStatus: async (key) => {\n      const data = await indexedDbGetStoreItem(`status-${databaseId}`, key);\n      return data as string;\n    },\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/executeBrowser.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/executeBrowser.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {
      "ExecuteContext": {
        "type": "object",
        "properties": {
          "schema": {},
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {
            "description": "Set a new value into the db (Optional, if given)"
          },
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/executeBrowser.ts",
      "name": "NamedParameters<typeof executeBrowser>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/executeBrowser.ts",
      "operationRelativePath": "src/browser-indexed-db/executeBrowser.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeBrowser%3E",
        "definitions": {
          "NamedParameters<typeof executeBrowser>": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/definitions/ExecuteContext"
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ExecuteContext": {
            "type": "object",
            "properties": {
              "schema": {},
              "dotLocation": {
                "type": "string",
                "description": "Data dotlocation"
              },
              "databaseId": {
                "type": "string"
              },
              "value": {
                "description": "Set a new value into the db (Optional, if given)"
              },
              "skipPlugin": {
                "type": "boolean",
                "description": "If true, skips executing the plugin"
              },
              "returnDotLocation": {
                "type": "string",
                "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
              },
              "updateCallbackUrl": {
                "type": "string",
                "description": "An url to be called back on with updates"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {}
              }
            },
            "required": [
              "schema",
              "dotLocation",
              "databaseId",
              "actionSchemaPlugins"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/ExecuteContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "schema",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "fullComment": "Set a new value into the db (Optional, if given)",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcVariable",
    "name": "version",
    "start": 216,
    "end": 232,
    "length": 16,
    "raw": "let version = 1;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcVariable",
    "name": "request",
    "start": 233,
    "end": 263,
    "length": 30,
    "raw": "let request: IDBOpenDBRequest;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcVariable",
    "name": "db",
    "start": 264,
    "end": 284,
    "length": 20,
    "raw": "let db: IDBDatabase;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcFunction",
    "name": "getDotLocationRange",
    "start": 286,
    "end": 434,
    "length": 148,
    "raw": "const getDotLocationRange = (key: string | undefined) =>\n  !key || key === \"\"\n    ? undefined\n    : IDBKeyRange.bound(`${key}.`, `${key}.~~~~~~~~`);",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof getDotLocationRange>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocationRange%3E",
        "definitions": {
          "NamedParameters<typeof getDotLocationRange>": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "key",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "initDb",
    "start": 436,
    "end": 746,
    "length": 310,
    "raw": "export const initDb = async (databaseId: string): Promise<boolean> => {\n  const db = await openDB(databaseId, version);\n  if (!db.objectStoreNames.contains(databaseId)) {\n    console.log(\"Creating store\", databaseId);\n    db.createObjectStore(databaseId, {\n      // keyPath: \"id\"\n    });\n  }\n\n  return true;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof initDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20initDb%3E",
        "definitions": {
          "NamedParameters<typeof initDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "indexedDbPutData",
    "start": 748,
    "end": 2095,
    "length": 1347,
    "raw": "export const indexedDbPutData = async <T>(\n  databaseId: string,\n  key: string,\n  value: T,\n): Promise<{ isSuccessful: boolean; message: string; result?: T }> => {\n  const db = await openDB(databaseId, version);\n  const tx = db.transaction(databaseId, \"readwrite\");\n  const store = tx.objectStore(databaseId);\n\n  if (value === null) {\n    // Delete all keys starting with the key\n    const range = getDotLocationRange(key);\n\n    // console.log({ key, range });\n    // get keys first\n    const keys = (await store.getAllKeys(range)) as string[];\n\n    await Promise.all(\n      keys.map((k) => {\n        return store.delete(k);\n      }),\n    );\n    //exact match too\n    store.delete(key);\n  } else if (typeof value === \"object\") {\n    // For bigger things we flatten it first!\n    const flat = flatten(value);\n    const flatKeys = Object.keys(flat);\n\n    const keys = flatKeys.map((k) => (key === \"\" ? k : `${key}.${k}`));\n\n    // console.log({ keys });\n    await Promise.all(\n      flatKeys.map((k) => {\n        const v = getDotLocation(value, k);\n        const fullKey = key === \"\" ? k : `${key}.${k}`;\n        return store.put(v, fullKey);\n      }),\n    );\n  } else {\n    await store.put(value, key);\n  }\n\n  await tx.done;\n\n  // console.log(\"put data done\", { value });\n  return { isSuccessful: true, message: \"Put data done\", result: value };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof indexedDbPutData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "indexedDbBuildObject",
    "start": 2124,
    "end": 2882,
    "length": 758,
    "raw": "export const indexedDbBuildObject = async (\n  /** E.g. the full JSON object */\n  databaseId: string,\n  /** if given, this is required prefix */\n  dotLocationBase?: string,\n): Promise<any> => {\n  const db = await openDB(databaseId);\n  const tx = db.transaction(databaseId, \"readonly\");\n  const store = tx.objectStore(databaseId);\n\n  const range = getDotLocationRange(dotLocationBase);\n\n  // get keys first\n  const keys = (await store.getAllKeys(range)) as string[];\n\n  const items = await Promise.all(\n    keys.map(async (key) => {\n      return { key, value: await store.get(key) };\n    }),\n  );\n\n  const result = items.reduce((previous, item) => {\n    const result = set(previous, item.key, item.value);\n    return result;\n  }, {} as O);\n\n  return result;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof indexedDbBuildObject>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20indexedDbBuildObject%3E",
        "definitions": {
          "NamedParameters<typeof indexedDbBuildObject>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string",
                "description": "E.g. the full JSON object"
              },
              "dotLocationBase": {
                "type": "string",
                "description": "if given, this is required prefix"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string",
          "description": "E.g. the full JSON object"
        },
        "simplifiedSchema": {
          "fullComment": "E.g. the full JSON object",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "dotLocationBase",
        "schema": {
          "type": "string",
          "description": "if given, this is required prefix"
        },
        "simplifiedSchema": {
          "fullComment": "if given, this is required prefix",
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "indexedDbGetItems",
    "start": 2911,
    "end": 3224,
    "length": 313,
    "raw": "export const indexedDbGetItems = async (\n  /** E.g. the full JSON object */\n  databaseId: string,\n): Promise<any[]> => {\n  const db = await openDB(databaseId);\n  const tx = db.transaction(databaseId, \"readonly\");\n  const store = tx.objectStore(databaseId);\n  const items = await store.getAll();\n  return items;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof indexedDbGetItems>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20indexedDbGetItems%3E",
        "definitions": {
          "NamedParameters<typeof indexedDbGetItems>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string",
                "description": "E.g. the full JSON object"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string",
          "description": "E.g. the full JSON object"
        },
        "simplifiedSchema": {
          "fullComment": "E.g. the full JSON object",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "indexedDbGetStoreItem",
    "start": 3257,
    "end": 4074,
    "length": 817,
    "raw": "export const indexedDbGetStoreItem = async <T>(\n  /** E.g. the full JSON object */\n  databaseId: string,\n  key: string,\n): Promise<T | undefined> => {\n  const db = await openDB(databaseId, version);\n  const tx = db.transaction(databaseId, \"readonly\");\n  const store = tx.objectStore(databaseId);\n  const res = await store.get(key);\n  await tx.done;\n  return res;\n\n  // return new Promise((resolve) => {\n  //   request = indexedDB.open(databaseId);\n\n  //   request.onsuccess = () => {\n  //     console.log(\"request.onsuccess - getAllData\");\n  //     db = request.result;\n  //     const tx = db.transaction(databaseId, \"readonly\");\n  //     const store = tx.objectStore(databaseId);\n\n  //     const res = store.get(key);\n  //     res.onsuccess = () => {\n  //       resolve(res.result);\n  //     };\n  //   };\n  // });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "name": "NamedParameters<typeof indexedDbGetStoreItem>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/indexedDb.ts",
      "operationRelativePath": "src/browser-indexed-db/indexedDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20indexedDbGetStoreItem%3E",
        "definitions": {
          "NamedParameters<typeof indexedDbGetStoreItem>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string",
                "description": "E.g. the full JSON object"
              },
              "key": {
                "type": "string"
              }
            },
            "required": [
              "databaseId",
              "key"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string",
          "description": "E.g. the full JSON object"
        },
        "simplifiedSchema": {
          "fullComment": "E.g. the full JSON object",
          "type": "string"
        },
        "required": true
      },
      {
        "name": "key",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "corsProxyApi",
    "start": 151,
    "end": 589,
    "length": 438,
    "raw": "export const corsProxyApi: NextApiHandler = async (req, res) => {\n  const url = Array.isArray(req.query.url) ? req.query.url[0] : req.query.url;\n  console.log({ url });\n  if (!url) {\n    res.status(301);\n    return;\n  }\n  try {\n    const resProxy = await fetch(url);\n    const text = await resProxy.text();\n    res.status(200).send(text);\n  } catch (error: any) {\n    console.log(error);\n    res.status(400).send(error.toString());\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/corsProxyApi.tsx",
    "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/corsProxyApi.tsx",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/browser-indexed-db/corsProxyApi.tsx",
      "name": "NamedParameters<typeof corsProxyApi>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/browser-indexed-db/corsProxyApi.tsx",
      "operationRelativePath": "src/browser-indexed-db/corsProxyApi.tsx",
      "error": "TypeError: WeakMap keys must be objects or non-registered symbols"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getDotLocationBase",
    "start": 90,
    "end": 568,
    "length": 478,
    "raw": "export const getDotLocationBase = (\n  dotLocation: string,\n  replaceDotLocation?: string,\n) => {\n  const tokenized = tokenize(dotLocation);\n  tokenized.pop();\n  const final = replaceDotLocation\n    ? tokenized.concat(tokenize(replaceDotLocation))\n    : tokenized;\n\n  return buildPath(final);\n\n  // const chunks = dotLocation.split(\".\");\n  // chunks.pop();\n  // const dotLocationBase = chunks.join(\".\");\n  // return replace ? `${dotLocationBase}.${replace}` : dotLocationBase;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
      "name": "NamedParameters<typeof getDotLocationBase>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotlocationBase.ts",
      "operationRelativePath": "src/util/getDotlocationBase.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocationBase%3E",
        "definitions": {
          "NamedParameters<typeof getDotLocationBase>": {
            "type": "object",
            "properties": {
              "dotLocation": {
                "type": "string"
              },
              "replaceDotLocation": {
                "type": "string"
              }
            },
            "required": [
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "replaceDotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "tryParseYamlToJson",
    "start": 119,
    "end": 417,
    "length": 298,
    "raw": "export const tryParseYamlToJson = <T = any>(yamlString: string): T | null => {\n  // Get document, or throw exception on error\n  try {\n    const document = load(yamlString);\n    return document as T;\n  } catch (e: any) {\n    // console.log(\"failed parsing yaml\", e?.message);\n    return null;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/tryParseYamlToJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/tryParseYamlToJson.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/tryParseYamlToJson.ts",
      "name": "NamedParameters<typeof tryParseYamlToJson>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/tryParseYamlToJson.ts",
      "operationRelativePath": "src/util/tryParseYamlToJson.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseYamlToJson%3E",
        "definitions": {
          "NamedParameters<typeof tryParseYamlToJson>": {
            "type": "object",
            "properties": {
              "yamlString": {
                "type": "string"
              }
            },
            "required": [
              "yamlString"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "yamlString",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchPluginOrDefault",
    "start": 155,
    "end": 1677,
    "length": 1522,
    "raw": "export const fetchPluginOrDefault = async (\n  context: ExecuteContext & EnvironmentConfig,\n) => {\n  const { schema, fetchPlugin, actionSchemaPlugins, getStatus } = context;\n\n  const plugin = schema[\"x-plugin\"];\n  const defaultValue = schema.default;\n\n  if (!plugin) {\n    // default value needed if there was no plugin\n    return {\n      value: defaultValue,\n      isSuccessful: true,\n      message: \"No plugin. Returned default value\",\n    };\n  }\n\n  if (plugin.dataDependencies && plugin.dataDependencies.length > 0) {\n    const statuses = (\n      await Promise.all(\n        plugin.dataDependencies.map((dotLocation) => getStatus(dotLocation)),\n      )\n    ).filter(notEmpty);\n    const hasStaleStatus = statuses.length > 0;\n\n    if (hasStaleStatus) {\n      return {\n        value: undefined,\n        hasStaleStatus,\n        isSuccessful: true,\n        message: \"Found one or more stale statuses, can't calculate yet.\",\n      };\n    }\n  }\n\n  //===== Looks at the schema and relevant existing data\n  const completeContext = {\n    ...plugin.context,\n  };\n\n  //====== Gathers authorization info\n\n  const $openapi = plugin.$openapi;\n\n  const details = await getOpenapiDetails($openapi, actionSchemaPlugins);\n\n  if (!details) {\n    return {\n      isSuccessful: false,\n      message: \"Could not find openapi details\",\n      value: undefined,\n    };\n  }\n\n  //===== Executes the plugin\n  const newValue = await fetchPlugin(details, completeContext);\n\n  return { value: newValue, isSuccessful: true, message: \"Got new value\" };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchPluginOrDefault.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchPluginOrDefault.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchPluginOrDefault.ts",
      "name": "NamedParameters<typeof fetchPluginOrDefault>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchPluginOrDefault.ts",
      "operationRelativePath": "src/util/fetchPluginOrDefault.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchPluginOrDefault%3E",
        "definitions": {
          "NamedParameters<typeof fetchPluginOrDefault>": {
            "type": "object",
            "properties": {
              "context": {}
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getDotLocation",
    "start": 38,
    "end": 145,
    "length": 107,
    "raw": "export const getDotLocation = (object: any, dotLocation: string) => {\n  return get(object, dotLocation);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotLocation.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotLocation.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getDotLocation.ts",
      "name": "NamedParameters<typeof getDotLocation>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getDotLocation.ts",
      "operationRelativePath": "src/util/getDotLocation.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocation%3E",
        "definitions": {
          "NamedParameters<typeof getDotLocation>": {
            "type": "object",
            "properties": {
              "object": {},
              "dotLocation": {
                "type": "string"
              }
            },
            "required": [
              "object",
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "object",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchExecute",
    "start": 367,
    "end": 829,
    "length": 462,
    "raw": "export const fetchExecute = async (\n  context: ExecuteContext & {\n    executeApiPath: string;\n    executeApiHeaders: { [key: string]: string };\n  },\n) => {\n  const { executeApiPath, executeApiHeaders, ...executeContext } = context;\n\n  const result = await fetch(executeApiPath, {\n    method: \"POST\",\n    body: JSON.stringify(executeContext),\n    headers: executeApiHeaders,\n  }).then((response) => response.json() as Promise<ExecuteResult>);\n\n  return result;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchExecute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchExecute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchExecute.ts",
      "name": "NamedParameters<typeof fetchExecute>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchExecute.ts",
      "operationRelativePath": "src/util/fetchExecute.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchExecute%3E",
        "definitions": {
          "NamedParameters<typeof fetchExecute>": {
            "type": "object",
            "properties": {
              "context": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "executeApiPath": {
                    "type": "string"
                  },
                  "executeApiHeaders": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "schema": {},
                  "dotLocation": {
                    "type": "string",
                    "description": "Data dotlocation"
                  },
                  "databaseId": {
                    "type": "string"
                  },
                  "value": {
                    "description": "Set a new value into the db (Optional, if given)"
                  },
                  "skipPlugin": {
                    "type": "boolean",
                    "description": "If true, skips executing the plugin"
                  },
                  "returnDotLocation": {
                    "type": "string",
                    "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
                  },
                  "updateCallbackUrl": {
                    "type": "string",
                    "description": "An url to be called back on with updates"
                  },
                  "actionSchemaPlugins": {
                    "type": "array",
                    "items": {}
                  }
                },
                "required": [
                  "actionSchemaPlugins",
                  "databaseId",
                  "dotLocation",
                  "executeApiHeaders",
                  "executeApiPath",
                  "schema"
                ]
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "executeApiPath": {
              "type": "string"
            },
            "executeApiHeaders": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "schema": {},
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {
              "description": "Set a new value into the db (Optional, if given)"
            },
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {}
            }
          },
          "required": [
            "actionSchemaPlugins",
            "databaseId",
            "dotLocation",
            "executeApiHeaders",
            "executeApiPath",
            "schema"
          ]
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "executeApiPath",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "executeApiHeaders",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "schema",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "fullComment": "Set a new value into the db (Optional, if given)",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcInterface",
    "name": "ValueOptions",
    "start": 178,
    "end": 903,
    "raw": "export type ValueOptions = {\n  /**\n   * If true, will replace the object rather than overwriting it where needed.\n   *\n   * By default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.\n   */\n  objectReplace?: boolean;\n  /**\n    If true, will replace items in the array fully.\n    \n    By default, ActionSchema will insert into an array with an optional discriminator (see below).\n    */\n  arrayReplace?: boolean;\n\n  /**\n   * If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.\n   */\n  arrayDiscriminatorPropertyKey?: string;\n};",
    "length": 725,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/types.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/types.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "objectReplace": {
            "type": "boolean",
            "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
          },
          "arrayReplace": {
            "type": "boolean",
            "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
          },
          "arrayDiscriminatorPropertyKey": {
            "type": "string",
            "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
          }
        },
        "additionalProperties": false,
        "description": "Should be inferred from x-plugin"
      },
      "simplifiedSchema": {
        "fullComment": "Should be inferred from x-plugin",
        "properties": [
          {
            "name": "objectReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed.",
              "type": "boolean"
            }
          },
          {
            "name": "arrayReplace",
            "required": false,
            "schema": {
              "fullComment": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below).",
              "type": "boolean"
            }
          },
          {
            "name": "arrayDiscriminatorPropertyKey",
            "required": false,
            "schema": {
              "fullComment": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is.",
              "type": "string"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "EnvironmentConfig",
    "start": 1523,
    "end": 2196,
    "raw": "export type EnvironmentConfig = {\n  /** Function to recurse on dependants. */\n  recurseFunction: (context: ExecuteContext) => Promise<{\n    isSuccessful: boolean;\n    message: string;\n  }>;\n  /** Set or remove a status.  */\n  setStatus: (key: string, value: string | null) => Promise<void>;\n  /** Get a status */\n  getStatus: (key: string) => Promise<string | undefined>;\n\n  setData: (key: string, value: any) => Promise<SetDataResult>;\n  getData: (key: string) => Promise<any>;\n  /** Can be different in environments */\n  fetchPlugin: (\n    details: {\n      apiUrl: string;\n      method: string;\n      headers: any;\n    },\n    completeContext: any,\n  ) => Promise<any>;\n};",
    "length": 673,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/types.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/types.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "recurseFunction": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Function to recurse on dependants."
          },
          "setStatus": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Set or remove a status."
          },
          "getStatus": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Get a status"
          },
          "setData": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            }
          },
          "getData": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            }
          },
          "fetchPlugin": {
            "type": "object",
            "properties": {
              "isFunction": {
                "type": "boolean",
                "const": true
              }
            },
            "description": "Can be different in environments"
          }
        },
        "required": [
          "recurseFunction",
          "setStatus",
          "getStatus",
          "setData",
          "getData",
          "fetchPlugin"
        ],
        "additionalProperties": false,
        "description": "The main 3 environments I want to be supporting are:\n\n- server (Users state is all in the server - can be a homeserver)\n- serverless (Users state is stored in some DB)\n- browser (Users state stays with the user)\n\nThe browser is the most scalable one, but is limited as it cannot easily receive callbacks and needs to remain online at all times. On the other hand, the server is the least scalable and hardest to set up, but has no limitations.\n\nThe goal is to share as much code as possible between the three environments, and open source at least the browser variant to get some eyeballs."
      },
      "simplifiedSchema": {
        "fullComment": "The main 3 environments I want to be supporting are:\n\n- server (Users state is all in the server - can be a homeserver)\n- serverless (Users state is stored in some DB)\n- browser (Users state stays with the user)\n\nThe browser is the most scalable one, but is limited as it cannot easily receive callbacks and needs to remain online at all times. On the other hand, the server is the least scalable and hardest to set up, but has no limitations.\n\nThe goal is to share as much code as possible between the three environments, and open source at least the browser variant to get some eyeballs.",
        "properties": [
          {
            "name": "recurseFunction",
            "required": true,
            "schema": {
              "fullComment": "Function to recurse on dependants.",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "setStatus",
            "required": true,
            "schema": {
              "fullComment": "Set or remove a status.",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "getStatus",
            "required": true,
            "schema": {
              "fullComment": "Get a status",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "setData",
            "required": true,
            "schema": {
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "getData",
            "required": true,
            "schema": {
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          },
          {
            "name": "fetchPlugin",
            "required": true,
            "schema": {
              "fullComment": "Can be different in environments",
              "properties": [
                {
                  "name": "isFunction",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "type": "object"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "ExecuteContext",
    "start": 2197,
    "end": 2743,
    "raw": "export type ExecuteContext = {\n  schema: ActionSchema;\n  /** Data dotlocation */\n  dotLocation: string;\n  databaseId: string;\n  /** Set a new value into the db (Optional, if given) */\n  value?: any;\n  /** If true, skips executing the plugin */\n  skipPlugin?: boolean;\n  /** If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution. */\n  returnDotLocation?: string;\n  /** An url to be called back on with updates */\n  updateCallbackUrl?: string;\n  actionSchemaPlugins: ActionSchemaPlugin[];\n};",
    "length": 546,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/types.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/types.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "schema": {},
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {
            "description": "Set a new value into the db (Optional, if given)"
          },
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "schema",
            "required": true,
            "schema": {
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "dotLocation",
            "required": true,
            "schema": {
              "fullComment": "Data dotlocation",
              "type": "string"
            }
          },
          {
            "name": "databaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "required": false,
            "schema": {
              "fullComment": "Set a new value into the db (Optional, if given)",
              "properties": [],
              "type": "object"
            }
          },
          {
            "name": "skipPlugin",
            "required": false,
            "schema": {
              "fullComment": "If true, skips executing the plugin",
              "type": "boolean"
            }
          },
          {
            "name": "returnDotLocation",
            "required": false,
            "schema": {
              "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
              "type": "string"
            }
          },
          {
            "name": "updateCallbackUrl",
            "required": false,
            "schema": {
              "fullComment": "An url to be called back on with updates",
              "type": "string"
            }
          },
          {
            "name": "actionSchemaPlugins",
            "required": true,
            "schema": {
              "items": [
                {
                  "schema": {
                    "properties": [],
                    "type": "object"
                  },
                  "name": null
                }
              ],
              "type": "array"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "ExecuteResult",
    "start": 2745,
    "end": 2862,
    "raw": "export type ExecuteResult = {\n  isSuccessful: boolean;\n  message: string;\n  /** Optional result */\n  result?: any;\n};",
    "length": 117,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/types.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/types.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "result": {
            "description": "Optional result"
          }
        },
        "required": [
          "isSuccessful",
          "message"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "isSuccessful",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "message",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "required": false,
            "schema": {
              "fullComment": "Optional result",
              "properties": [],
              "type": "object"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcInterface",
    "name": "SetDataResult",
    "start": 2864,
    "end": 2940,
    "raw": "export type SetDataResult = {\n  isSuccessful: boolean;\n  message: string;\n};",
    "length": 76,
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/types.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/types.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "type": {
      "isArray": false,
      "isEnum": false,
      "isEnumLiteral": false,
      "isObject": false,
      "isPrimitive": false,
      "rawType": "",
      "typeCoverage": 0,
      "typeDefinition": {
        "type": "object",
        "properties": {
          "isSuccessful": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "isSuccessful",
          "message"
        ],
        "additionalProperties": false
      },
      "simplifiedSchema": {
        "properties": [
          {
            "name": "isSuccessful",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "message",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "type": "object"
      }
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "cleanFetch",
    "start": 130,
    "end": 2376,
    "length": 2246,
    "raw": "export const cleanFetch = async (\n  details: { apiUrl: string; headers: string; method: string },\n  context: any,\n): Promise<{\n  isSuccessful: boolean;\n  result: any;\n  error?: string;\n  responseText?: string;\n  context?: any;\n  headers?: any;\n}> => {\n  try {\n    const abortController = new AbortController();\n    const id = setTimeout(() => abortController.abort(), 300 * 1000);\n\n    console.log({ details, context });\n    const result = await fetch(details.apiUrl, {\n      method: details.method,\n      signal: abortController.signal,\n      headers: {\n        ...JSON.parse(details.headers),\n        // Forced headers, we only support JSON apis\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: context ? JSON.stringify(context) : undefined,\n    })\n      .then(async (response) => {\n        let error = \"\";\n        if (\n          !response.ok ||\n          !response.headers.get(\"Content-Type\")?.includes(\"json\")\n        ) {\n          error += `\"Response not ok, status: ${response.status}, statusText: ${response.statusText}`;\n        }\n\n        const responseText = await response.text();\n\n        try {\n          return { isSuccessful: true, result: JSON.parse(responseText) };\n        } catch (e) {\n          const headers = JSON.stringify(\n            mergeObjectsArray(\n              Array.from(response.headers.keys()).map((key) => ({\n                [key]: response.headers.get(key),\n              })),\n            ),\n          );\n\n          return {\n            isSuccessful: false,\n            error,\n            responseText,\n            context,\n            headers,\n            result: undefined,\n          };\n        }\n      })\n      .catch((e) => {\n        return {\n          isSuccessful: false,\n\n          result: undefined,\n          error: `Your request could not be executed, you may be disconnected or the server may not be available. `,\n          errorStatus: e.status,\n          errorString: String(e),\n          context,\n        };\n      });\n\n    clearTimeout(id);\n\n    return result;\n  } catch (e) {\n    return {\n      isSuccessful: false,\n      message:\n        \"The API didn't resolve, and the fetch crashed because of it: \" +\n        String(e),\n    } as any;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/cleanFetch.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/cleanFetch.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/cleanFetch.ts",
      "name": "NamedParameters<typeof cleanFetch>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/cleanFetch.ts",
      "operationRelativePath": "src/util/cleanFetch.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20cleanFetch%3E",
        "definitions": {
          "NamedParameters<typeof cleanFetch>": {
            "type": "object",
            "properties": {
              "details": {
                "type": "object",
                "properties": {
                  "apiUrl": {
                    "type": "string"
                  },
                  "headers": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string"
                  }
                },
                "required": [
                  "apiUrl",
                  "headers",
                  "method"
                ],
                "additionalProperties": false
              },
              "context": {}
            },
            "required": [
              "details",
              "context"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "details",
        "schema": {
          "type": "object",
          "properties": {
            "apiUrl": {
              "type": "string"
            },
            "headers": {
              "type": "string"
            },
            "method": {
              "type": "string"
            }
          },
          "required": [
            "apiUrl",
            "headers",
            "method"
          ],
          "additionalProperties": false
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "apiUrl",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "headers",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "method",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "context",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcVariable",
    "name": "openapis",
    "start": 121,
    "end": 177,
    "length": 56,
    "raw": "const openapis: { [url: string]: OpenAPIDocument } = {};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchOpenapi",
    "start": 217,
    "end": 887,
    "length": 670,
    "raw": "export const fetchOpenapi = async (openapiUrl: string | undefined) => {\n  if (!openapiUrl) {\n    return;\n  }\n\n  if (openapis[openapiUrl]) {\n    // NB: cached in memory\n    return openapis[openapiUrl];\n  }\n\n  const isYaml = openapiUrl.endsWith(\".yaml\");\n\n  const { json, status, statusText, text } =\n    await fetchWithTimeout<OpenAPIDocument>(\n      openapiUrl,\n      {\n        headers: isYaml\n          ? undefined\n          : {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n      },\n      30000,\n    );\n\n  if (json) {\n    // NB: set cache\n    openapis[openapiUrl] = json;\n  }\n\n  return json || undefined;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
      "name": "NamedParameters<typeof fetchOpenapi>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchOpenapi.ts",
      "operationRelativePath": "src/util/fetchOpenapi.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchOpenapi%3E",
        "definitions": {
          "NamedParameters<typeof fetchOpenapi>": {
            "type": "object",
            "properties": {
              "openapiUrl": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "openapiUrl",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "execute",
    "start": 1174,
    "end": 5452,
    "length": 4278,
    "raw": "export const execute = async (\n  context: ExecuteContext & EnvironmentConfig,\n): Promise<ExecuteResult> => {\n  const {\n    dotLocation,\n    schema,\n    databaseId,\n    value,\n    skipPlugin,\n    returnDotLocation,\n    recurseFunction,\n    getData,\n    getStatus,\n    setData,\n    setStatus,\n    updateCallbackUrl,\n    actionSchemaPlugins,\n    fetchPlugin,\n  } = context;\n\n  // Set `busy` status (to not conflict with spawner)\n  await setStatus(dotLocation, \"busy\");\n  let setValueResult: undefined | { isSuccessful: boolean; message: string } =\n    undefined;\n\n  //====== Executes the plugin\n  const schemaHere = getSchemaAtDotLocation(schema, dotLocation);\n  if (!schemaHere) {\n    return {\n      isSuccessful: false,\n      message: \"Invalid plugin output location\",\n    };\n  }\n\n  const plugin = schemaHere[\"x-plugin\"];\n  const defaultValue = schemaHere.default;\n  const noEntryPossible = skipPlugin || (!plugin && !defaultValue);\n  //console.log({ schemaHere, plugin, noEntryPossible });\n\n  if (value !== undefined) {\n    //===== Set a new value into the db (Optional, if given)\n    setValueResult = await setData(dotLocation, value);\n\n    if (noEntryPossible) {\n      return setValueResult;\n    }\n  }\n\n  if (noEntryPossible) {\n    await setStatus(dotLocation, null);\n\n    return {\n      isSuccessful: true,\n      message: \"Did not set any value, did not execute any plugin\",\n    };\n  }\n\n  const fetchResult = await fetchPluginOrDefault({\n    ...context,\n    // used parameters\n    dotLocation,\n    setStatus,\n    fetchPlugin,\n    actionSchemaPlugins,\n    // more specific schema\n    schema: schemaHere,\n  });\n\n  console.log({ fetchResult });\n  //===== Updates the data with the result\n  // const values = flatten(newValue);\n\n  if (fetchResult.hasStaleStatus) {\n    await setStatus(dotLocation, null);\n\n    return { isSuccessful: false, message: \"Stale Dependants Found\" };\n  }\n\n  const realValue =\n    fetchResult.value !== undefined\n      ? plugin && plugin.outputLocation && plugin.outputLocation !== \"\"\n        ? getDotLocation(fetchResult.value, plugin.outputLocation)\n        : fetchResult.value\n      : undefined;\n\n  const setNewValueResult = realValue\n    ? await setData(dotLocation, fetchResult.value)\n    : { isSuccessful: true, message: \"No value set\" };\n\n  //======= Remove `busy` status\n  await setStatus(dotLocation, null);\n\n  //=== Look at other columns that have this dotLocation in `dataDependencies`, Set those status to `stale`\n\n  // This would be one level up, so the entire object\n  const baseDotLocation = getDotLocationBase(dotLocation);\n\n  const newObjectExposedDotLocations =\n    getNewObjectExposedDotLocations(\n      schemaHere,\n      fetchResult.value,\n      dotLocation,\n    ) || [];\n\n  const newArrayExposedDotLocations =\n    getNewArrayExposedDotLocations(\n      schemaHere,\n      fetchResult.value,\n      dotLocation,\n    ) || [];\n  // console.log({\n  //   schemaHere,\n  //   value: fetchResult.value,\n  //   dotLocation,\n  //   newArrayExposedDotLocations,\n  // });\n\n  // Look at other columns that have this datapoint in `dataDependencies`\n  const properties =\n    getSchemaAtDotLocation(schema, baseDotLocation)?.properties || {};\n\n  const dependantKeys = Object.keys(properties).filter((key) => {\n    const schema = properties[key];\n    const plugin = schema[\"x-plugin\"];\n\n    const isDependant = plugin?.dataDependencies?.includes(dotLocation);\n    return isDependant;\n  });\n\n  // Set those status to `stale`\n  const dependantDotLocations = dependantKeys.map((k) =>\n    getDotLocationBase(dotLocation, k),\n  );\n\n  const exposedDotLocations = dependantDotLocations\n    .concat(newObjectExposedDotLocations)\n    .concat(newArrayExposedDotLocations);\n\n  await Promise.all(\n    exposedDotLocations.map(async (dotLocation) => {\n      await setStatus(dotLocation, \"stale\");\n    }),\n  );\n\n  console.log({ dotLocation, exposedDotLocations });\n  //====== Try to execute `executeGridPlugin` for new exposed locations directly incase available. (No probem if it fails)\n  exposedDotLocations.map((dotLocation) => {\n    // NB: Don't wait for this\n    recurseFunction({ ...context, dotLocation, value: undefined }).then(\n      (result) => {\n        console.log(\"recursed\", { dotLocation, result });\n      },\n    );\n  });\n\n  return setNewValueResult;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
      "name": "NamedParameters<typeof execute>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
      "operationRelativePath": "src/util/execute.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20execute%3E",
        "definitions": {
          "NamedParameters<typeof execute>": {
            "type": "object",
            "properties": {
              "context": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "recurseFunction": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Function to recurse on dependants."
                  },
                  "setStatus": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Set or remove a status."
                  },
                  "getStatus": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Get a status"
                  },
                  "setData": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  "getData": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  "fetchPlugin": {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    },
                    "description": "Can be different in environments"
                  },
                  "schema": {},
                  "dotLocation": {
                    "type": "string",
                    "description": "Data dotlocation"
                  },
                  "databaseId": {
                    "type": "string"
                  },
                  "value": {
                    "description": "Set a new value into the db (Optional, if given)"
                  },
                  "skipPlugin": {
                    "type": "boolean",
                    "description": "If true, skips executing the plugin"
                  },
                  "returnDotLocation": {
                    "type": "string",
                    "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
                  },
                  "updateCallbackUrl": {
                    "type": "string",
                    "description": "An url to be called back on with updates"
                  },
                  "actionSchemaPlugins": {
                    "type": "array",
                    "items": {}
                  }
                },
                "required": [
                  "actionSchemaPlugins",
                  "databaseId",
                  "dotLocation",
                  "fetchPlugin",
                  "getData",
                  "getStatus",
                  "recurseFunction",
                  "schema",
                  "setData",
                  "setStatus"
                ]
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "recurseFunction": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Function to recurse on dependants."
            },
            "setStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Set or remove a status."
            },
            "getStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Get a status"
            },
            "setData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "getData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "fetchPlugin": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Can be different in environments"
            },
            "schema": {},
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {
              "description": "Set a new value into the db (Optional, if given)"
            },
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {}
            }
          },
          "required": [
            "actionSchemaPlugins",
            "databaseId",
            "dotLocation",
            "fetchPlugin",
            "getData",
            "getStatus",
            "recurseFunction",
            "schema",
            "setData",
            "setStatus"
          ]
        },
        "simplifiedSchema": {
          "properties": [
            {
              "name": "recurseFunction",
              "required": true,
              "schema": {
                "fullComment": "Function to recurse on dependants.",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "setStatus",
              "required": true,
              "schema": {
                "fullComment": "Set or remove a status.",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "getStatus",
              "required": true,
              "schema": {
                "fullComment": "Get a status",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "setData",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "getData",
              "required": true,
              "schema": {
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "fetchPlugin",
              "required": true,
              "schema": {
                "fullComment": "Can be different in environments",
                "properties": [
                  {
                    "name": "isFunction",
                    "required": false,
                    "schema": {
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              }
            },
            {
              "name": "schema",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "fullComment": "Set a new value into the db (Optional, if given)",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getNewObjectExposedDotLocations",
    "start": 5538,
    "end": 6129,
    "length": 591,
    "raw": "export const getNewObjectExposedDotLocations = (\n  schemaHere: ActionSchema,\n  newValue: any,\n  dotLocation: string,\n) => {\n  if (\n    schemaHere.type === \"object\" &&\n    schemaHere.properties &&\n    newValue &&\n    typeof newValue === \"object\" &&\n    !Array.isArray(newValue)\n  ) {\n    const allKeys = Object.keys(schemaHere.properties);\n    const newKeys = Object.keys(newValue);\n    const notYetKeys = allKeys.filter((k) => !newKeys.includes(k));\n\n    const dotLocations = notYetKeys.map((k) =>\n      dotLocation === \"\" ? k : `${dotLocation}.${k}`,\n    );\n\n    return dotLocations;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
      "name": "NamedParameters<typeof getNewObjectExposedDotLocations>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
      "operationRelativePath": "src/util/execute.ts",
      "error": "Error: Could not translate intersection to union."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getNewArrayExposedDotLocations",
    "start": 6204,
    "end": 7337,
    "length": 1133,
    "raw": "export const getNewArrayExposedDotLocations = (\n  schemaHere: ActionSchema,\n  newValue: any,\n  dotLocation: string,\n) => {\n  if (\n    schemaHere.type === \"array\" &&\n    schemaHere.items &&\n    newValue &&\n    Array.isArray(newValue)\n  ) {\n    // NB: get properties for every object possibility of the items\n    const allKeys =\n      schemaHere.items === true\n        ? []\n        : makeArray(schemaHere.items)\n            .filter((x) => x.type === \"object\" && x.properties)\n            .map((x) => Object.keys(x.properties!))\n            .flat()\n            .filter(onlyUnique2());\n\n    // try execute for each new item in the array, for each property we don't have yet\n    const dotLocations = newValue\n      .map((item, index) => {\n        const newKeys =\n          typeof item === \"object\" && !Array.isArray(item)\n            ? Object.keys(item)\n            : // NB: we don't support non-object expansion Iguess\n              [];\n\n        const notYetKeys = allKeys.filter((k) => !newKeys.includes(k));\n\n        return notYetKeys.map((k) => `${dotLocation}.${index}.${k}`);\n      })\n      .flat();\n\n    return dotLocations;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/execute.ts",
      "name": "NamedParameters<typeof getNewArrayExposedDotLocations>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/execute.ts",
      "operationRelativePath": "src/util/execute.ts",
      "error": "Error: Reference type not set yet"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getOpenapiDetails",
    "start": 281,
    "end": 2049,
    "length": 1768,
    "raw": "export const getOpenapiDetails = async (\n  $openapi: OpenAPIDetails | undefined,\n  actionSchemaPlugins: ActionSchemaPlugin[] | undefined,\n) => {\n  if (!$openapi) {\n    console.log(\"getOpenApiDetails: NO $OPENAPI DETAILS On the plugin\");\n    return;\n  }\n\n  const url = new URL($openapi.url);\n\n  if (!url) {\n    console.log(\"getOpenApiDetails: NO URL\");\n    return;\n  }\n\n  const exactPlugin = actionSchemaPlugins?.find((x) => x.__id === $openapi.url);\n  const plugin = exactPlugin\n    ? exactPlugin\n    : // NB: Temporary Exception\n    $openapi.url === \"https://root.actionschema.com/openapi.json\"\n    ? actionSchemaPlugins?.find((x) =>\n        x.__id?.endsWith(\".actionschema.com/openapi.json\"),\n      )\n    : undefined;\n\n  if (!plugin) {\n    console.log(\"getOpenApiDetails: Plugin couldn't be found\", {\n      actionSchemaPlugins,\n      urlToMatchId: $openapi.url,\n      plugin,\n    });\n    return;\n  }\n\n  const headers = plugin.headers as any;\n\n  if (!headers) {\n    console.log(\"getOpenApiDetails: Headers couldn't be found\", {\n      actionSchemaPlugins,\n      urlToMatchId: $openapi.url,\n      headers,\n    });\n    return;\n  }\n\n  const isDev = process.env.IS_DEV === \"true\";\n\n  const realOpenapiUrl =\n    (isDev || plugin.isInternallyHosted) &&\n    plugin.localhostOpenapiUrl &&\n    plugin.localhostOpenapiUrl !== \"\"\n      ? plugin.localhostOpenapiUrl\n      : $openapi.url;\n\n  const openapi = await fetchOpenapi(realOpenapiUrl);\n\n  if (!openapi) {\n    console.log(\"getOpenApiDetails: OpenAPI Not available\", realOpenapiUrl);\n  }\n\n  // Server origin url including '/'\n  const serverOriginUrl = openapi?.servers?.[0]?.url || url.origin;\n\n  const apiUrl = `${serverOriginUrl}${$openapi.path}`;\n  const method = $openapi.method;\n\n  return { apiUrl, method, headers };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getOpenapiDetails.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getOpenapiDetails.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {
      "OpenAPIDetails": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "operationId": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "path",
          "method",
          "operationId"
        ],
        "description": "The OpenAPI information required to execute the function."
      },
      "ActionSchemaPlugin": {
        "type": "object",
        "properties": {
          "__id": {
            "type": "string",
            "description": "The entire URL should be here"
          },
          "headers": {
            "type": "string"
          },
          "localhostOpenapiUrl": {
            "type": "string",
            "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
          },
          "isInternallyHosted": {
            "type": "boolean",
            "description": "If true, this indicates we should always use localhost, even in production."
          }
        },
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getOpenapiDetails.ts",
      "name": "NamedParameters<typeof getOpenapiDetails>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getOpenapiDetails.ts",
      "operationRelativePath": "src/util/getOpenapiDetails.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getOpenapiDetails%3E",
        "definitions": {
          "NamedParameters<typeof getOpenapiDetails>": {
            "type": "object",
            "properties": {
              "$openapi": {
                "$ref": "#/definitions/OpenAPIDetails"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActionSchemaPlugin"
                }
              }
            },
            "additionalProperties": false
          },
          "OpenAPIDetails": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "method": {
                "type": "string"
              },
              "operationId": {
                "type": "string"
              },
              "emoji": {
                "type": "string"
              }
            },
            "required": [
              "url",
              "path",
              "method",
              "operationId"
            ],
            "description": "The OpenAPI information required to execute the function."
          },
          "ActionSchemaPlugin": {
            "type": "object",
            "properties": {
              "__id": {
                "type": "string",
                "description": "The entire URL should be here"
              },
              "headers": {
                "type": "string"
              },
              "localhostOpenapiUrl": {
                "type": "string",
                "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
              },
              "isInternallyHosted": {
                "type": "boolean",
                "description": "If true, this indicates we should always use localhost, even in production."
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "$openapi",
        "schema": {
          "$ref": "#/definitions/OpenAPIDetails"
        },
        "simplifiedSchema": {
          "fullComment": "The OpenAPI information required to execute the function.",
          "properties": [
            {
              "name": "url",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "method",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "operationId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "emoji",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "actionSchemaPlugins",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchemaPlugin"
          }
        },
        "simplifiedSchema": {
          "items": [
            {
              "schema": {
                "fullComment": "",
                "properties": [
                  {
                    "name": "__id",
                    "required": false,
                    "schema": {
                      "fullComment": "The entire URL should be here",
                      "type": "string"
                    }
                  },
                  {
                    "name": "headers",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "localhostOpenapiUrl",
                    "required": false,
                    "schema": {
                      "fullComment": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost",
                      "type": "string"
                    }
                  },
                  {
                    "name": "isInternallyHosted",
                    "required": false,
                    "schema": {
                      "fullComment": "If true, this indicates we should always use localhost, even in production.",
                      "type": "boolean"
                    }
                  }
                ],
                "type": "object"
              },
              "name": "ActionSchemaPlugin"
            }
          ],
          "type": "array"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeStaleWatcher",
    "start": 0,
    "end": 50,
    "length": 50,
    "raw": "export const executeStaleWatcher = () => {\n  //\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/executeStaleWatcher.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/executeStaleWatcher.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/executeStaleWatcher.ts",
      "name": "NamedParameters<typeof executeStaleWatcher>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/executeStaleWatcher.ts",
      "operationRelativePath": "src/util/executeStaleWatcher.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeStaleWatcher%3E",
        "definitions": {
          "NamedParameters<typeof executeStaleWatcher>": {
            "type": "object",
            "additionalProperties": false
          }
        }
      }
    }
  },
  {
    "modelName": "SwcVariable",
    "name": "removeCommentsRegex",
    "start": 0,
    "end": 77,
    "length": 77,
    "raw": "const removeCommentsRegex = /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g;",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/tryParseJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/tryParseJson.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcFunction",
    "name": "tryParseJson",
    "start": 123,
    "end": 528,
    "length": 405,
    "raw": "export const tryParseJson = <T extends unknown>(\n  text: string,\n  logParseError?: boolean,\n): T | null => {\n  try {\n    const jsonStringWithoutComments = text.replace(\n      removeCommentsRegex,\n      (m, g) => (g ? \"\" : m),\n    );\n    return JSON.parse(jsonStringWithoutComments) as T;\n  } catch (parseError) {\n    if (logParseError) console.log(\"JSON Parse error:\", parseError);\n    return null;\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/tryParseJson.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/tryParseJson.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/tryParseJson.ts",
      "name": "NamedParameters<typeof tryParseJson>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/tryParseJson.ts",
      "operationRelativePath": "src/util/tryParseJson.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseJson%3E",
        "definitions": {
          "NamedParameters<typeof tryParseJson>": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              },
              "logParseError": {
                "type": "boolean"
              }
            },
            "required": [
              "text"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "text",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "logParseError",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchWithTimeout",
    "start": 260,
    "end": 745,
    "length": 485,
    "raw": "export const fetchWithTimeout = async <T extends any>(\n  input: string | Request | URL,\n  init?: RequestInit,\n  timeoutMs?: number,\n  isNoJson?: boolean,\n  isNoText?: boolean,\n) => {\n  const { status, statusText, text, response } = await fetchTextWithTimeout(\n    input,\n    init,\n    timeoutMs,\n    isNoText,\n  );\n  const json =\n    text && !isNoJson\n      ? tryParseJson<T>(text) || tryParseYamlToJson<T>(text)\n      : null;\n\n  return { text, json, status, statusText, response };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {
      "Request": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
          },
          "bodyUsed": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
          },
          "destination": {
            "$ref": "#/definitions/RequestDestination",
            "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
          },
          "headers": {
            "$ref": "#/definitions/Headers",
            "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
          },
          "integrity": {
            "type": "string",
            "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
          },
          "keepalive": {
            "type": "boolean",
            "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
          },
          "method": {
            "type": "string",
            "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
          },
          "referrer": {
            "type": "string",
            "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
          },
          "signal": {
            "$ref": "#/definitions/AbortSignal",
            "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
          },
          "url": {
            "type": "string",
            "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
          }
        },
        "required": [
          "body",
          "bodyUsed",
          "cache",
          "credentials",
          "destination",
          "headers",
          "integrity",
          "keepalive",
          "method",
          "mode",
          "redirect",
          "referrer",
          "referrerPolicy",
          "signal",
          "url"
        ],
        "additionalProperties": false,
        "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
      },
      "ReadableStream<Uint8Array>": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "RequestCache": {
        "type": "string",
        "enum": [
          "default",
          "force-cache",
          "no-cache",
          "no-store",
          "only-if-cached",
          "reload"
        ]
      },
      "RequestCredentials": {
        "type": "string",
        "enum": [
          "include",
          "omit",
          "same-origin"
        ]
      },
      "RequestDestination": {
        "type": "string",
        "enum": [
          "",
          "audio",
          "audioworklet",
          "document",
          "embed",
          "font",
          "frame",
          "iframe",
          "image",
          "manifest",
          "object",
          "paintworklet",
          "report",
          "script",
          "sharedworker",
          "style",
          "track",
          "video",
          "worker",
          "xslt"
        ]
      },
      "Headers": {
        "type": "object",
        "additionalProperties": false
      },
      "RequestMode": {
        "type": "string",
        "enum": [
          "cors",
          "navigate",
          "no-cors",
          "same-origin"
        ]
      },
      "RequestRedirect": {
        "type": "string",
        "enum": [
          "error",
          "follow",
          "manual"
        ]
      },
      "ReferrerPolicy": {
        "type": "string",
        "enum": [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "origin",
          "origin-when-cross-origin",
          "same-origin",
          "strict-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ]
      },
      "AbortSignal": {
        "type": "object",
        "properties": {
          "aborted": {
            "type": "boolean",
            "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)"
          },
          "onabort": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "isFunction": {
                    "type": "boolean",
                    "const": true
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)"
          },
          "reason": {
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)"
          }
        },
        "required": [
          "aborted",
          "onabort",
          "reason"
        ],
        "additionalProperties": false,
        "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)"
      },
      "RequestInit": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/BodyInit"
              },
              {
                "type": "null"
              }
            ],
            "description": "A BodyInit object or null to set request's body."
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "A string indicating how the request will interact with the browser's cache to set request's cache."
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials."
          },
          "headers": {
            "$ref": "#/definitions/HeadersInit",
            "description": "A Headers object, an object literal, or an array of two-item arrays to set request's headers."
          },
          "integrity": {
            "type": "string",
            "description": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity."
          },
          "keepalive": {
            "type": "boolean",
            "description": "A boolean to set request's keepalive."
          },
          "method": {
            "type": "string",
            "description": "A string to set request's method."
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode."
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect."
          },
          "referrer": {
            "type": "string",
            "description": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer."
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "A referrer policy to set request's referrerPolicy."
          },
          "signal": {
            "anyOf": [
              {
                "$ref": "#/definitions/AbortSignal"
              },
              {
                "type": "null"
              }
            ],
            "description": "An AbortSignal to set request's signal."
          },
          "window": {
            "type": "null",
            "description": "Can only be null. Used to disassociate request from any Window."
          }
        },
        "additionalProperties": false
      },
      "BodyInit": {
        "anyOf": [
          {
            "$ref": "#/definitions/ReadableStream"
          },
          {
            "$ref": "#/definitions/XMLHttpRequestBodyInit"
          }
        ]
      },
      "ReadableStream": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "XMLHttpRequestBodyInit": {
        "anyOf": [
          {
            "$ref": "#/definitions/Blob"
          },
          {
            "$ref": "#/definitions/BufferSource"
          },
          {
            "$ref": "#/definitions/FormData"
          },
          {
            "$ref": "#/definitions/URLSearchParams"
          },
          {
            "type": "string"
          }
        ]
      },
      "Blob": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)"
          },
          "type": {
            "type": "string",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)"
          }
        },
        "required": [
          "size",
          "type"
        ],
        "additionalProperties": false,
        "description": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)"
      },
      "BufferSource": {
        "anyOf": [
          {
            "$ref": "#/definitions/ArrayBufferView"
          },
          {
            "$ref": "#/definitions/ArrayBuffer"
          }
        ]
      },
      "ArrayBufferView": {
        "type": "object",
        "properties": {
          "buffer": {
            "$ref": "#/definitions/ArrayBufferLike"
          },
          "byteLength": {
            "type": "number"
          },
          "byteOffset": {
            "type": "number"
          }
        },
        "required": [
          "buffer",
          "byteLength",
          "byteOffset"
        ],
        "additionalProperties": false
      },
      "ArrayBufferLike": {
        "$ref": "#/definitions/ArrayBuffer"
      },
      "ArrayBuffer": {
        "type": "object",
        "properties": {
          "byteLength": {
            "type": "number"
          }
        },
        "required": [
          "byteLength"
        ],
        "additionalProperties": false
      },
      "FormData": {
        "type": "object",
        "additionalProperties": false
      },
      "URLSearchParams": {
        "type": "object",
        "additionalProperties": false
      },
      "HeadersInit": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "$ref": "#/definitions/Record%3Cstring%2Cstring%3E"
          },
          {
            "$ref": "#/definitions/Headers"
          }
        ]
      },
      "Record<string,string>": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
      "name": "NamedParameters<typeof fetchWithTimeout>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
      "operationRelativePath": "src/util/fetchWithTimeout.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchWithTimeout%3E",
        "definitions": {
          "NamedParameters<typeof fetchWithTimeout>": {
            "type": "object",
            "properties": {
              "input": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Request"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              },
              "init": {
                "$ref": "#/definitions/RequestInit"
              },
              "timeoutMs": {
                "type": "number"
              },
              "isNoJson": {
                "type": "boolean"
              },
              "isNoText": {
                "type": "boolean"
              }
            },
            "required": [
              "input"
            ],
            "additionalProperties": false
          },
          "Request": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
              },
              "bodyUsed": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
              },
              "destination": {
                "$ref": "#/definitions/RequestDestination",
                "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
              },
              "headers": {
                "$ref": "#/definitions/Headers",
                "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
              },
              "integrity": {
                "type": "string",
                "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
              },
              "keepalive": {
                "type": "boolean",
                "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
              },
              "method": {
                "type": "string",
                "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
              },
              "referrer": {
                "type": "string",
                "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
              },
              "signal": {
                "$ref": "#/definitions/AbortSignal",
                "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
              },
              "url": {
                "type": "string",
                "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
              }
            },
            "required": [
              "body",
              "bodyUsed",
              "cache",
              "credentials",
              "destination",
              "headers",
              "integrity",
              "keepalive",
              "method",
              "mode",
              "redirect",
              "referrer",
              "referrerPolicy",
              "signal",
              "url"
            ],
            "additionalProperties": false,
            "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
          },
          "ReadableStream<Uint8Array>": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "RequestCache": {
            "type": "string",
            "enum": [
              "default",
              "force-cache",
              "no-cache",
              "no-store",
              "only-if-cached",
              "reload"
            ]
          },
          "RequestCredentials": {
            "type": "string",
            "enum": [
              "include",
              "omit",
              "same-origin"
            ]
          },
          "RequestDestination": {
            "type": "string",
            "enum": [
              "",
              "audio",
              "audioworklet",
              "document",
              "embed",
              "font",
              "frame",
              "iframe",
              "image",
              "manifest",
              "object",
              "paintworklet",
              "report",
              "script",
              "sharedworker",
              "style",
              "track",
              "video",
              "worker",
              "xslt"
            ]
          },
          "Headers": {
            "type": "object",
            "additionalProperties": false
          },
          "RequestMode": {
            "type": "string",
            "enum": [
              "cors",
              "navigate",
              "no-cors",
              "same-origin"
            ]
          },
          "RequestRedirect": {
            "type": "string",
            "enum": [
              "error",
              "follow",
              "manual"
            ]
          },
          "ReferrerPolicy": {
            "type": "string",
            "enum": [
              "",
              "no-referrer",
              "no-referrer-when-downgrade",
              "origin",
              "origin-when-cross-origin",
              "same-origin",
              "strict-origin",
              "strict-origin-when-cross-origin",
              "unsafe-url"
            ]
          },
          "AbortSignal": {
            "type": "object",
            "properties": {
              "aborted": {
                "type": "boolean",
                "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)"
              },
              "onabort": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)"
              },
              "reason": {
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)"
              }
            },
            "required": [
              "aborted",
              "onabort",
              "reason"
            ],
            "additionalProperties": false,
            "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)"
          },
          "RequestInit": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BodyInit"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "A BodyInit object or null to set request's body."
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "A string indicating how the request will interact with the browser's cache to set request's cache."
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials."
              },
              "headers": {
                "$ref": "#/definitions/HeadersInit",
                "description": "A Headers object, an object literal, or an array of two-item arrays to set request's headers."
              },
              "integrity": {
                "type": "string",
                "description": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity."
              },
              "keepalive": {
                "type": "boolean",
                "description": "A boolean to set request's keepalive."
              },
              "method": {
                "type": "string",
                "description": "A string to set request's method."
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode."
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect."
              },
              "referrer": {
                "type": "string",
                "description": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer."
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "A referrer policy to set request's referrerPolicy."
              },
              "signal": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AbortSignal"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "An AbortSignal to set request's signal."
              },
              "window": {
                "type": "null",
                "description": "Can only be null. Used to disassociate request from any Window."
              }
            },
            "additionalProperties": false
          },
          "BodyInit": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream"
              },
              {
                "$ref": "#/definitions/XMLHttpRequestBodyInit"
              }
            ]
          },
          "ReadableStream": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "XMLHttpRequestBodyInit": {
            "anyOf": [
              {
                "$ref": "#/definitions/Blob"
              },
              {
                "$ref": "#/definitions/BufferSource"
              },
              {
                "$ref": "#/definitions/FormData"
              },
              {
                "$ref": "#/definitions/URLSearchParams"
              },
              {
                "type": "string"
              }
            ]
          },
          "Blob": {
            "type": "object",
            "properties": {
              "size": {
                "type": "number",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)"
              },
              "type": {
                "type": "string",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)"
              }
            },
            "required": [
              "size",
              "type"
            ],
            "additionalProperties": false,
            "description": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)"
          },
          "BufferSource": {
            "anyOf": [
              {
                "$ref": "#/definitions/ArrayBufferView"
              },
              {
                "$ref": "#/definitions/ArrayBuffer"
              }
            ]
          },
          "ArrayBufferView": {
            "type": "object",
            "properties": {
              "buffer": {
                "$ref": "#/definitions/ArrayBufferLike"
              },
              "byteLength": {
                "type": "number"
              },
              "byteOffset": {
                "type": "number"
              }
            },
            "required": [
              "buffer",
              "byteLength",
              "byteOffset"
            ],
            "additionalProperties": false
          },
          "ArrayBufferLike": {
            "$ref": "#/definitions/ArrayBuffer"
          },
          "ArrayBuffer": {
            "type": "object",
            "properties": {
              "byteLength": {
                "type": "number"
              }
            },
            "required": [
              "byteLength"
            ],
            "additionalProperties": false
          },
          "FormData": {
            "type": "object",
            "additionalProperties": false
          },
          "URLSearchParams": {
            "type": "object",
            "additionalProperties": false
          },
          "HeadersInit": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              {
                "$ref": "#/definitions/Record%3Cstring%2Cstring%3E"
              },
              {
                "$ref": "#/definitions/Headers"
              }
            ]
          },
          "Record<string,string>": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "parameters": [
      {
        "name": "input",
        "schema": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Request"
            },
            {
              "type": "string",
              "format": "uri"
            }
          ]
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "init",
        "schema": {
          "$ref": "#/definitions/RequestInit"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "body",
              "required": false,
              "schema": {
                "fullComment": "A BodyInit object or null to set request's body.",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "cache",
              "required": false,
              "schema": {
                "enum": [
                  "default",
                  "force-cache",
                  "no-cache",
                  "no-store",
                  "only-if-cached",
                  "reload"
                ],
                "fullComment": "A string indicating how the request will interact with the browser's cache to set request's cache.\n\n",
                "type": "string"
              }
            },
            {
              "name": "credentials",
              "required": false,
              "schema": {
                "enum": [
                  "include",
                  "omit",
                  "same-origin"
                ],
                "fullComment": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\n\n",
                "type": "string"
              }
            },
            {
              "name": "headers",
              "required": false,
              "schema": {
                "fullComment": "A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n\n",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "integrity",
              "required": false,
              "schema": {
                "fullComment": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity.",
                "type": "string"
              }
            },
            {
              "name": "keepalive",
              "required": false,
              "schema": {
                "fullComment": "A boolean to set request's keepalive.",
                "type": "boolean"
              }
            },
            {
              "name": "method",
              "required": false,
              "schema": {
                "fullComment": "A string to set request's method.",
                "type": "string"
              }
            },
            {
              "name": "mode",
              "required": false,
              "schema": {
                "enum": [
                  "cors",
                  "navigate",
                  "no-cors",
                  "same-origin"
                ],
                "fullComment": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n\n",
                "type": "string"
              }
            },
            {
              "name": "redirect",
              "required": false,
              "schema": {
                "enum": [
                  "error",
                  "follow",
                  "manual"
                ],
                "fullComment": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n\n",
                "type": "string"
              }
            },
            {
              "name": "referrer",
              "required": false,
              "schema": {
                "fullComment": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.",
                "type": "string"
              }
            },
            {
              "name": "referrerPolicy",
              "required": false,
              "schema": {
                "enum": [
                  "",
                  "no-referrer",
                  "no-referrer-when-downgrade",
                  "origin",
                  "origin-when-cross-origin",
                  "same-origin",
                  "strict-origin",
                  "strict-origin-when-cross-origin",
                  "unsafe-url"
                ],
                "fullComment": "A referrer policy to set request's referrerPolicy.\n\n",
                "type": "string"
              }
            },
            {
              "name": "signal",
              "required": false,
              "schema": {
                "fullComment": "An AbortSignal to set request's signal.",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "window",
              "required": false,
              "schema": {
                "fullComment": "Can only be null. Used to disassociate request from any Window.",
                "type": "null"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "timeoutMs",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      },
      {
        "name": "isNoJson",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      },
      {
        "name": "isNoText",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "fetchTextWithTimeout",
    "start": 747,
    "end": 1752,
    "length": 1005,
    "raw": "export const fetchTextWithTimeout = async (\n  input: string | Request | URL,\n  init?: RequestInit,\n  timeoutMs?: number,\n  isNoText?: boolean,\n) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeoutMs || 300000);\n\n    const response = await fetch(input, {\n      ...init,\n      signal: controller.signal,\n    }).catch((err: any) => {\n      console.log({ err });\n      // console.log(Object.keys(err.cause));\n      return err.cause.code as string; // Error caused by fetch\n    });\n\n    clearTimeout(timeoutId);\n\n    if (typeof response === \"string\") {\n      return { statusText: response };\n    }\n\n    const status = response?.status;\n    const statusText = response?.statusText;\n    // console.log({ status, statusText });\n    const text = isNoText ? undefined : await response.text();\n\n    return { text, status, statusText, response };\n  } catch (e) {\n    return { text: undefined, status: 500, statusText: \"Catched fetch\" };\n  }\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {
      "Request": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
          },
          "bodyUsed": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
          },
          "destination": {
            "$ref": "#/definitions/RequestDestination",
            "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
          },
          "headers": {
            "$ref": "#/definitions/Headers",
            "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
          },
          "integrity": {
            "type": "string",
            "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
          },
          "keepalive": {
            "type": "boolean",
            "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
          },
          "method": {
            "type": "string",
            "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
          },
          "referrer": {
            "type": "string",
            "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
          },
          "signal": {
            "$ref": "#/definitions/AbortSignal",
            "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
          },
          "url": {
            "type": "string",
            "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
          }
        },
        "required": [
          "body",
          "bodyUsed",
          "cache",
          "credentials",
          "destination",
          "headers",
          "integrity",
          "keepalive",
          "method",
          "mode",
          "redirect",
          "referrer",
          "referrerPolicy",
          "signal",
          "url"
        ],
        "additionalProperties": false,
        "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
      },
      "ReadableStream<Uint8Array>": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "RequestCache": {
        "type": "string",
        "enum": [
          "default",
          "force-cache",
          "no-cache",
          "no-store",
          "only-if-cached",
          "reload"
        ]
      },
      "RequestCredentials": {
        "type": "string",
        "enum": [
          "include",
          "omit",
          "same-origin"
        ]
      },
      "RequestDestination": {
        "type": "string",
        "enum": [
          "",
          "audio",
          "audioworklet",
          "document",
          "embed",
          "font",
          "frame",
          "iframe",
          "image",
          "manifest",
          "object",
          "paintworklet",
          "report",
          "script",
          "sharedworker",
          "style",
          "track",
          "video",
          "worker",
          "xslt"
        ]
      },
      "Headers": {
        "type": "object",
        "additionalProperties": false
      },
      "RequestMode": {
        "type": "string",
        "enum": [
          "cors",
          "navigate",
          "no-cors",
          "same-origin"
        ]
      },
      "RequestRedirect": {
        "type": "string",
        "enum": [
          "error",
          "follow",
          "manual"
        ]
      },
      "ReferrerPolicy": {
        "type": "string",
        "enum": [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "origin",
          "origin-when-cross-origin",
          "same-origin",
          "strict-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ]
      },
      "AbortSignal": {
        "type": "object",
        "properties": {
          "aborted": {
            "type": "boolean",
            "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)"
          },
          "onabort": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "isFunction": {
                    "type": "boolean",
                    "const": true
                  }
                }
              },
              {
                "type": "null"
              }
            ],
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)"
          },
          "reason": {
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)"
          }
        },
        "required": [
          "aborted",
          "onabort",
          "reason"
        ],
        "additionalProperties": false,
        "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)"
      },
      "RequestInit": {
        "type": "object",
        "properties": {
          "body": {
            "anyOf": [
              {
                "$ref": "#/definitions/BodyInit"
              },
              {
                "type": "null"
              }
            ],
            "description": "A BodyInit object or null to set request's body."
          },
          "cache": {
            "$ref": "#/definitions/RequestCache",
            "description": "A string indicating how the request will interact with the browser's cache to set request's cache."
          },
          "credentials": {
            "$ref": "#/definitions/RequestCredentials",
            "description": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials."
          },
          "headers": {
            "$ref": "#/definitions/HeadersInit",
            "description": "A Headers object, an object literal, or an array of two-item arrays to set request's headers."
          },
          "integrity": {
            "type": "string",
            "description": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity."
          },
          "keepalive": {
            "type": "boolean",
            "description": "A boolean to set request's keepalive."
          },
          "method": {
            "type": "string",
            "description": "A string to set request's method."
          },
          "mode": {
            "$ref": "#/definitions/RequestMode",
            "description": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode."
          },
          "redirect": {
            "$ref": "#/definitions/RequestRedirect",
            "description": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect."
          },
          "referrer": {
            "type": "string",
            "description": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer."
          },
          "referrerPolicy": {
            "$ref": "#/definitions/ReferrerPolicy",
            "description": "A referrer policy to set request's referrerPolicy."
          },
          "signal": {
            "anyOf": [
              {
                "$ref": "#/definitions/AbortSignal"
              },
              {
                "type": "null"
              }
            ],
            "description": "An AbortSignal to set request's signal."
          },
          "window": {
            "type": "null",
            "description": "Can only be null. Used to disassociate request from any Window."
          }
        },
        "additionalProperties": false
      },
      "BodyInit": {
        "anyOf": [
          {
            "$ref": "#/definitions/ReadableStream"
          },
          {
            "$ref": "#/definitions/XMLHttpRequestBodyInit"
          }
        ]
      },
      "ReadableStream": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
          }
        },
        "required": [
          "locked"
        ],
        "additionalProperties": false,
        "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
      },
      "XMLHttpRequestBodyInit": {
        "anyOf": [
          {
            "$ref": "#/definitions/Blob"
          },
          {
            "$ref": "#/definitions/BufferSource"
          },
          {
            "$ref": "#/definitions/FormData"
          },
          {
            "$ref": "#/definitions/URLSearchParams"
          },
          {
            "type": "string"
          }
        ]
      },
      "Blob": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)"
          },
          "type": {
            "type": "string",
            "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)"
          }
        },
        "required": [
          "size",
          "type"
        ],
        "additionalProperties": false,
        "description": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)"
      },
      "BufferSource": {
        "anyOf": [
          {
            "$ref": "#/definitions/ArrayBufferView"
          },
          {
            "$ref": "#/definitions/ArrayBuffer"
          }
        ]
      },
      "ArrayBufferView": {
        "type": "object",
        "properties": {
          "buffer": {
            "$ref": "#/definitions/ArrayBufferLike"
          },
          "byteLength": {
            "type": "number"
          },
          "byteOffset": {
            "type": "number"
          }
        },
        "required": [
          "buffer",
          "byteLength",
          "byteOffset"
        ],
        "additionalProperties": false
      },
      "ArrayBufferLike": {
        "$ref": "#/definitions/ArrayBuffer"
      },
      "ArrayBuffer": {
        "type": "object",
        "properties": {
          "byteLength": {
            "type": "number"
          }
        },
        "required": [
          "byteLength"
        ],
        "additionalProperties": false
      },
      "FormData": {
        "type": "object",
        "additionalProperties": false
      },
      "URLSearchParams": {
        "type": "object",
        "additionalProperties": false
      },
      "HeadersInit": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 2,
              "maxItems": 2
            }
          },
          {
            "$ref": "#/definitions/Record%3Cstring%2Cstring%3E"
          },
          {
            "$ref": "#/definitions/Headers"
          }
        ]
      },
      "Record<string,string>": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
      "name": "NamedParameters<typeof fetchTextWithTimeout>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/fetchWithTimeout.ts",
      "operationRelativePath": "src/util/fetchWithTimeout.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchTextWithTimeout%3E",
        "definitions": {
          "NamedParameters<typeof fetchTextWithTimeout>": {
            "type": "object",
            "properties": {
              "input": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Request"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              },
              "init": {
                "$ref": "#/definitions/RequestInit"
              },
              "timeoutMs": {
                "type": "number"
              },
              "isNoText": {
                "type": "boolean"
              }
            },
            "required": [
              "input"
            ],
            "additionalProperties": false
          },
          "Request": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ReadableStream%3CUint8Array%3E"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)"
              },
              "bodyUsed": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)"
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)"
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)"
              },
              "destination": {
                "$ref": "#/definitions/RequestDestination",
                "description": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)"
              },
              "headers": {
                "$ref": "#/definitions/Headers",
                "description": "Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)"
              },
              "integrity": {
                "type": "string",
                "description": "Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)"
              },
              "keepalive": {
                "type": "boolean",
                "description": "Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)"
              },
              "method": {
                "type": "string",
                "description": "Returns request's HTTP method, which is \"GET\" by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)"
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)"
              },
              "referrer": {
                "type": "string",
                "description": "Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)"
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)"
              },
              "signal": {
                "$ref": "#/definitions/AbortSignal",
                "description": "Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)"
              },
              "url": {
                "type": "string",
                "description": "Returns the URL of request as a string.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"
              }
            },
            "required": [
              "body",
              "bodyUsed",
              "cache",
              "credentials",
              "destination",
              "headers",
              "integrity",
              "keepalive",
              "method",
              "mode",
              "redirect",
              "referrer",
              "referrerPolicy",
              "signal",
              "url"
            ],
            "additionalProperties": false,
            "description": "This Fetch API interface represents a resource request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)"
          },
          "ReadableStream<Uint8Array>": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "RequestCache": {
            "type": "string",
            "enum": [
              "default",
              "force-cache",
              "no-cache",
              "no-store",
              "only-if-cached",
              "reload"
            ]
          },
          "RequestCredentials": {
            "type": "string",
            "enum": [
              "include",
              "omit",
              "same-origin"
            ]
          },
          "RequestDestination": {
            "type": "string",
            "enum": [
              "",
              "audio",
              "audioworklet",
              "document",
              "embed",
              "font",
              "frame",
              "iframe",
              "image",
              "manifest",
              "object",
              "paintworklet",
              "report",
              "script",
              "sharedworker",
              "style",
              "track",
              "video",
              "worker",
              "xslt"
            ]
          },
          "Headers": {
            "type": "object",
            "additionalProperties": false
          },
          "RequestMode": {
            "type": "string",
            "enum": [
              "cors",
              "navigate",
              "no-cors",
              "same-origin"
            ]
          },
          "RequestRedirect": {
            "type": "string",
            "enum": [
              "error",
              "follow",
              "manual"
            ]
          },
          "ReferrerPolicy": {
            "type": "string",
            "enum": [
              "",
              "no-referrer",
              "no-referrer-when-downgrade",
              "origin",
              "origin-when-cross-origin",
              "same-origin",
              "strict-origin",
              "strict-origin-when-cross-origin",
              "unsafe-url"
            ]
          },
          "AbortSignal": {
            "type": "object",
            "properties": {
              "aborted": {
                "type": "boolean",
                "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)"
              },
              "onabort": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "isFunction": {
                        "type": "boolean",
                        "const": true
                      }
                    }
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)"
              },
              "reason": {
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)"
              }
            },
            "required": [
              "aborted",
              "onabort",
              "reason"
            ],
            "additionalProperties": false,
            "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)"
          },
          "RequestInit": {
            "type": "object",
            "properties": {
              "body": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/BodyInit"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "A BodyInit object or null to set request's body."
              },
              "cache": {
                "$ref": "#/definitions/RequestCache",
                "description": "A string indicating how the request will interact with the browser's cache to set request's cache."
              },
              "credentials": {
                "$ref": "#/definitions/RequestCredentials",
                "description": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials."
              },
              "headers": {
                "$ref": "#/definitions/HeadersInit",
                "description": "A Headers object, an object literal, or an array of two-item arrays to set request's headers."
              },
              "integrity": {
                "type": "string",
                "description": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity."
              },
              "keepalive": {
                "type": "boolean",
                "description": "A boolean to set request's keepalive."
              },
              "method": {
                "type": "string",
                "description": "A string to set request's method."
              },
              "mode": {
                "$ref": "#/definitions/RequestMode",
                "description": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode."
              },
              "redirect": {
                "$ref": "#/definitions/RequestRedirect",
                "description": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect."
              },
              "referrer": {
                "type": "string",
                "description": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer."
              },
              "referrerPolicy": {
                "$ref": "#/definitions/ReferrerPolicy",
                "description": "A referrer policy to set request's referrerPolicy."
              },
              "signal": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AbortSignal"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "An AbortSignal to set request's signal."
              },
              "window": {
                "type": "null",
                "description": "Can only be null. Used to disassociate request from any Window."
              }
            },
            "additionalProperties": false
          },
          "BodyInit": {
            "anyOf": [
              {
                "$ref": "#/definitions/ReadableStream"
              },
              {
                "$ref": "#/definitions/XMLHttpRequestBodyInit"
              }
            ]
          },
          "ReadableStream": {
            "type": "object",
            "properties": {
              "locked": {
                "type": "boolean",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)"
              }
            },
            "required": [
              "locked"
            ],
            "additionalProperties": false,
            "description": "This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)"
          },
          "XMLHttpRequestBodyInit": {
            "anyOf": [
              {
                "$ref": "#/definitions/Blob"
              },
              {
                "$ref": "#/definitions/BufferSource"
              },
              {
                "$ref": "#/definitions/FormData"
              },
              {
                "$ref": "#/definitions/URLSearchParams"
              },
              {
                "type": "string"
              }
            ]
          },
          "Blob": {
            "type": "object",
            "properties": {
              "size": {
                "type": "number",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)"
              },
              "type": {
                "type": "string",
                "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)"
              }
            },
            "required": [
              "size",
              "type"
            ],
            "additionalProperties": false,
            "description": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)"
          },
          "BufferSource": {
            "anyOf": [
              {
                "$ref": "#/definitions/ArrayBufferView"
              },
              {
                "$ref": "#/definitions/ArrayBuffer"
              }
            ]
          },
          "ArrayBufferView": {
            "type": "object",
            "properties": {
              "buffer": {
                "$ref": "#/definitions/ArrayBufferLike"
              },
              "byteLength": {
                "type": "number"
              },
              "byteOffset": {
                "type": "number"
              }
            },
            "required": [
              "buffer",
              "byteLength",
              "byteOffset"
            ],
            "additionalProperties": false
          },
          "ArrayBufferLike": {
            "$ref": "#/definitions/ArrayBuffer"
          },
          "ArrayBuffer": {
            "type": "object",
            "properties": {
              "byteLength": {
                "type": "number"
              }
            },
            "required": [
              "byteLength"
            ],
            "additionalProperties": false
          },
          "FormData": {
            "type": "object",
            "additionalProperties": false
          },
          "URLSearchParams": {
            "type": "object",
            "additionalProperties": false
          },
          "HeadersInit": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              {
                "$ref": "#/definitions/Record%3Cstring%2Cstring%3E"
              },
              {
                "$ref": "#/definitions/Headers"
              }
            ]
          },
          "Record<string,string>": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "parameters": [
      {
        "name": "input",
        "schema": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Request"
            },
            {
              "type": "string",
              "format": "uri"
            }
          ]
        },
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      },
      {
        "name": "init",
        "schema": {
          "$ref": "#/definitions/RequestInit"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "body",
              "required": false,
              "schema": {
                "fullComment": "A BodyInit object or null to set request's body.",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "cache",
              "required": false,
              "schema": {
                "enum": [
                  "default",
                  "force-cache",
                  "no-cache",
                  "no-store",
                  "only-if-cached",
                  "reload"
                ],
                "fullComment": "A string indicating how the request will interact with the browser's cache to set request's cache.\n\n",
                "type": "string"
              }
            },
            {
              "name": "credentials",
              "required": false,
              "schema": {
                "enum": [
                  "include",
                  "omit",
                  "same-origin"
                ],
                "fullComment": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\n\n",
                "type": "string"
              }
            },
            {
              "name": "headers",
              "required": false,
              "schema": {
                "fullComment": "A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n\n",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "integrity",
              "required": false,
              "schema": {
                "fullComment": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity.",
                "type": "string"
              }
            },
            {
              "name": "keepalive",
              "required": false,
              "schema": {
                "fullComment": "A boolean to set request's keepalive.",
                "type": "boolean"
              }
            },
            {
              "name": "method",
              "required": false,
              "schema": {
                "fullComment": "A string to set request's method.",
                "type": "string"
              }
            },
            {
              "name": "mode",
              "required": false,
              "schema": {
                "enum": [
                  "cors",
                  "navigate",
                  "no-cors",
                  "same-origin"
                ],
                "fullComment": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n\n",
                "type": "string"
              }
            },
            {
              "name": "redirect",
              "required": false,
              "schema": {
                "enum": [
                  "error",
                  "follow",
                  "manual"
                ],
                "fullComment": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n\n",
                "type": "string"
              }
            },
            {
              "name": "referrer",
              "required": false,
              "schema": {
                "fullComment": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.",
                "type": "string"
              }
            },
            {
              "name": "referrerPolicy",
              "required": false,
              "schema": {
                "enum": [
                  "",
                  "no-referrer",
                  "no-referrer-when-downgrade",
                  "origin",
                  "origin-when-cross-origin",
                  "same-origin",
                  "strict-origin",
                  "strict-origin-when-cross-origin",
                  "unsafe-url"
                ],
                "fullComment": "A referrer policy to set request's referrerPolicy.\n\n",
                "type": "string"
              }
            },
            {
              "name": "signal",
              "required": false,
              "schema": {
                "fullComment": "An AbortSignal to set request's signal.",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "window",
              "required": false,
              "schema": {
                "fullComment": "Can only be null. Used to disassociate request from any Window.",
                "type": "null"
              }
            }
          ],
          "type": "object"
        },
        "required": false
      },
      {
        "name": "timeoutMs",
        "schema": {
          "type": "number"
        },
        "simplifiedSchema": {
          "type": "number"
        },
        "required": false
      },
      {
        "name": "isNoText",
        "schema": {
          "type": "boolean"
        },
        "simplifiedSchema": {
          "type": "boolean"
        },
        "required": false
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getSchemaAtDotLocation",
    "start": 119,
    "end": 1216,
    "length": 1097,
    "raw": "export const getSchemaAtDotLocation = (\n  schema: ActionSchema,\n  dotLocation: string,\n): ActionSchema | undefined => {\n  const tokens = tokenize(dotLocation);\n  const first = tokens.shift();\n  const rest = buildPath(tokens);\n  if (first === undefined) {\n    // tokens should be empty array. No locations.\n    return schema;\n  }\n\n  const schemaAtLocation =\n    schema.type === \"array\"\n      ? schema.items\n      : schema.type === \"object\"\n      ? schema.properties?.[first]\n      : undefined;\n\n  if (!schemaAtLocation || schemaAtLocation === true) {\n    //shouldn't happen right?\n    return;\n  }\n\n  const finalSchema = !Array.isArray(schemaAtLocation)\n    ? // Regular schemas can be returned\n      schemaAtLocation\n    : // Wildcards take the first one\n    first === \"*\"\n    ? schemaAtLocation[0]\n    : // If we have multiple, take the number token or first if not possible\n    schemaAtLocation.length < Number(first)\n    ? schemaAtLocation[0]\n    : schemaAtLocation[Number(first)];\n\n  // Recurse on this non-basecase (rest has 1 token less)\n  return getSchemaAtDotLocation(finalSchema, rest);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
      "name": "NamedParameters<typeof getSchemaAtDotLocation>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/util/getSchemaAtDotLocation.ts",
      "operationRelativePath": "src/util/getSchemaAtDotLocation.ts",
      "error": "Error: Encountered a reference to a missing definition: \"#/definitions/interface-1366410753-558-3934-1366410753-0-8112\". This is a bug."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "executeServerless",
    "start": 354,
    "end": 1505,
    "length": 1151,
    "raw": "export const executeServerless = (\n  context: ExecuteContext,\n): Promise<ExecuteResult> => {\n  const {\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n  } = context;\n\n  return execute({\n    actionSchemaPlugins,\n    databaseId,\n    dotLocation,\n    schema,\n    returnDotLocation,\n    skipPlugin,\n    updateCallbackUrl,\n    value,\n    setData: async (key, value) => {\n      return putData(databaseId, key, value);\n    },\n\n    setStatus: async (key, value) => {\n      await putData(`status-${databaseId}`, key, value);\n      return;\n    },\n    fetchPlugin: cleanFetch,\n\n    getData: async (key) => {\n      //TODO\n      const data = await getStoreData(databaseId);\n      return data;\n    },\n\n    getStatus: async (key) => {\n      //TODO\n      const data = await getStoreData(`status-${databaseId}`);\n      return \"busy\";\n    },\n\n    recurseFunction: (context) => {\n      const host = `http://localhost:3000`;\n      return fetchExecute({\n        ...context,\n        executeApiPath: `${host}/api/execute`,\n        executeApiHeaders: {},\n      });\n    },\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/executeServerless.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/executeServerless.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {
      "ExecuteContext": {
        "type": "object",
        "properties": {
          "schema": {},
          "dotLocation": {
            "type": "string",
            "description": "Data dotlocation"
          },
          "databaseId": {
            "type": "string"
          },
          "value": {
            "description": "Set a new value into the db (Optional, if given)"
          },
          "skipPlugin": {
            "type": "boolean",
            "description": "If true, skips executing the plugin"
          },
          "returnDotLocation": {
            "type": "string",
            "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
          },
          "updateCallbackUrl": {
            "type": "string",
            "description": "An url to be called back on with updates"
          },
          "actionSchemaPlugins": {
            "type": "array",
            "items": {}
          }
        },
        "required": [
          "schema",
          "dotLocation",
          "databaseId",
          "actionSchemaPlugins"
        ],
        "additionalProperties": false
      }
    },
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/executeServerless.ts",
      "name": "NamedParameters<typeof executeServerless>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/executeServerless.ts",
      "operationRelativePath": "src/serverless-vercel-kv/executeServerless.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeServerless%3E",
        "definitions": {
          "NamedParameters<typeof executeServerless>": {
            "type": "object",
            "properties": {
              "context": {
                "$ref": "#/definitions/ExecuteContext"
              }
            },
            "required": [
              "context"
            ],
            "additionalProperties": false
          },
          "ExecuteContext": {
            "type": "object",
            "properties": {
              "schema": {},
              "dotLocation": {
                "type": "string",
                "description": "Data dotlocation"
              },
              "databaseId": {
                "type": "string"
              },
              "value": {
                "description": "Set a new value into the db (Optional, if given)"
              },
              "skipPlugin": {
                "type": "boolean",
                "description": "If true, skips executing the plugin"
              },
              "returnDotLocation": {
                "type": "string",
                "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
              },
              "updateCallbackUrl": {
                "type": "string",
                "description": "An url to be called back on with updates"
              },
              "actionSchemaPlugins": {
                "type": "array",
                "items": {}
              }
            },
            "required": [
              "schema",
              "dotLocation",
              "databaseId",
              "actionSchemaPlugins"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "context",
        "schema": {
          "$ref": "#/definitions/ExecuteContext"
        },
        "simplifiedSchema": {
          "fullComment": "",
          "properties": [
            {
              "name": "schema",
              "required": true,
              "schema": {
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "dotLocation",
              "required": true,
              "schema": {
                "fullComment": "Data dotlocation",
                "type": "string"
              }
            },
            {
              "name": "databaseId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "required": false,
              "schema": {
                "fullComment": "Set a new value into the db (Optional, if given)",
                "properties": [],
                "type": "object"
              }
            },
            {
              "name": "skipPlugin",
              "required": false,
              "schema": {
                "fullComment": "If true, skips executing the plugin",
                "type": "boolean"
              }
            },
            {
              "name": "returnDotLocation",
              "required": false,
              "schema": {
                "fullComment": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution.",
                "type": "string"
              }
            },
            {
              "name": "updateCallbackUrl",
              "required": false,
              "schema": {
                "fullComment": "An url to be called back on with updates",
                "type": "string"
              }
            },
            {
              "name": "actionSchemaPlugins",
              "required": true,
              "schema": {
                "items": [
                  {
                    "schema": {
                      "properties": [],
                      "type": "object"
                    },
                    "name": null
                  }
                ],
                "type": "array"
              }
            }
          ],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "putData",
    "start": 0,
    "end": 142,
    "length": 142,
    "raw": "export const putData = (databaseId: string, key: string, value: any) => {\n  return { isSuccessful: false, message: \"Not implmeneted yet\" };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
      "name": "NamedParameters<typeof putData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
      "operationRelativePath": "src/serverless-vercel-kv/vercelKvStore.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20putData%3E",
        "definitions": {
          "NamedParameters<typeof putData>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "value": {}
            },
            "required": [
              "databaseId",
              "key",
              "value"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "key",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "value",
        "schema": {},
        "simplifiedSchema": {
          "properties": [],
          "type": "object"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getStoreData",
    "start": 143,
    "end": 265,
    "length": 122,
    "raw": "export const getStoreData = (databaseId: string) => {\n  return { isSuccessful: false, message: \"Not implmeneted yet\" };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
      "name": "NamedParameters<typeof getStoreData>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/vercelKvStore.ts",
      "operationRelativePath": "src/serverless-vercel-kv/vercelKvStore.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStoreData%3E",
        "definitions": {
          "NamedParameters<typeof getStoreData>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "executeApi",
    "start": 145,
    "end": 322,
    "length": 177,
    "raw": "export const executeApi: NextApiHandler = async (req, res) => {\n  const context = req.body;\n  const result = await executeServerless(context);\n  res.status(200).json(result);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/executeApi.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/executeApi.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/serverless-vercel-kv/executeApi.ts",
      "name": "NamedParameters<typeof executeApi>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/serverless-vercel-kv/executeApi.ts",
      "operationRelativePath": "src/serverless-vercel-kv/executeApi.ts",
      "error": "TypeError: WeakMap keys must be objects or non-registered symbols"
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "executeGridPluginWorker",
    "start": 387,
    "end": 997,
    "length": 610,
    "raw": "const executeGridPluginWorker = async (context: WorkerContext) => {\n  const {\n    completeContext,\n    dotLocation,\n    schema,\n    actionSchemaPlugins,\n    databaseId,\n  } = context;\n\n  const plugins = getSchemaAtDotLocation(schema, dotLocation);\n  const plugin = Array.isArray(plugins) ? plugins[0] : plugins;\n  if (!plugin) {\n    return;\n  }\n\n  const $openapi = plugin.$openapi;\n  const details = await getOpenapiDetails($openapi, actionSchemaPlugins);\n\n  if (!details) {\n    return;\n  }\n\n  const data = await cleanFetch(details, completeContext);\n  await setValue(databaseId, dotLocation, schema, data);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPluginWorker.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPluginWorker.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPluginWorker.ts",
      "name": "NamedParameters<typeof executeGridPluginWorker>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPluginWorker.ts",
      "operationRelativePath": "src/server-fs-lmdb/executeGridPluginWorker.ts",
      "error": "Error: Could not translate intersection to union."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "setValue",
    "start": 540,
    "end": 1094,
    "length": 554,
    "raw": "export const setValue = async (\n  databaseId: string,\n  dotLocation: string,\n  schema: ActionSchema,\n  data: any,\n  /** Are to be inferred from the schema */\n  options?: ValueOptions,\n): Promise<{ isSuccessful: boolean; message: string }> => {\n  //1) Set new data\n  // could be a more direct usage of lmdb\n  let db = getDb(databaseId);\n  await db.put(dotLocation, data);\n\n  const values = flatten(data);\n\n  //2) Update statuses\n  await setPropertyStatusDone(schema, dotLocation, databaseId);\n\n  return { isSuccessful: true, message: \"Set the value\" };\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/setValue.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/setValue.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/setValue.ts",
      "name": "NamedParameters<typeof setValue>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/setValue.ts",
      "operationRelativePath": "src/server-fs-lmdb/setValue.ts",
      "error": "Error: Encountered a reference to a missing definition: \"#/definitions/interface-1366410753-558-3934-1366410753-0-8112\". This is a bug."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "getDb",
    "start": 30,
    "end": 227,
    "length": 197,
    "raw": "export const getDb = (databaseId: string) => {\n  return open({\n    path: `data/${databaseId}/data`,\n    // any options go here, we can turn on compression like this:\n    compression: true,\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getDb.ts",
      "name": "NamedParameters<typeof getDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getDb.ts",
      "operationRelativePath": "src/server-fs-lmdb/storage/getDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDb%3E",
        "definitions": {
          "NamedParameters<typeof getDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getActionSchema",
    "start": 124,
    "end": 458,
    "length": 334,
    "raw": "export const getActionSchema = async (databaseId: string) => {\n  const schemaPath = path.join(\n    new URL(import.meta.url).pathname,\n    \"../../schemas\",\n    databaseId + \".schema.json\",\n  );\n\n  const schemaString = await fs.readFile(schemaPath, \"utf8\");\n  const schema = JSON.parse(schemaString) as ActionSchema;\n  return schema;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getActionSchema.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getActionSchema.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getActionSchema.ts",
      "name": "NamedParameters<typeof getActionSchema>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getActionSchema.ts",
      "operationRelativePath": "src/server-fs-lmdb/storage/getActionSchema.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getActionSchema%3E",
        "definitions": {
          "NamedParameters<typeof getActionSchema>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getStatusDb",
    "start": 30,
    "end": 235,
    "length": 205,
    "raw": "export const getStatusDb = (databaseId: string) => {\n  return open({\n    path: `data/${databaseId}/status`,\n    // any options go here, we can turn on compression like this:\n    compression: true,\n  });\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getStatusDb.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getStatusDb.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getStatusDb.ts",
      "name": "NamedParameters<typeof getStatusDb>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getStatusDb.ts",
      "operationRelativePath": "src/server-fs-lmdb/storage/getStatusDb.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStatusDb%3E",
        "definitions": {
          "NamedParameters<typeof getStatusDb>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcFunction",
    "name": "getValue",
    "start": 83,
    "end": 506,
    "length": 423,
    "raw": "export const getValue = (\n  databaseId: string,\n  /** Will find all locations starting with this */\n  dotLocation: string,\n) => {\n  let db = getDb(databaseId);\n\n  const dotLocations = db\n    .getRange({ start: dotLocation })\n    .filter((entry) => entry.key.toString().startsWith(dotLocation))\n    .map(({ key, value }) => ({ key, value })).asArray;\n\n  // TODO: serialise dotLocations into a JSON.\n  return dotLocations;\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getValue.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getValue.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/storage/getValue.ts",
      "name": "NamedParameters<typeof getValue>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/storage/getValue.ts",
      "operationRelativePath": "src/server-fs-lmdb/storage/getValue.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20getValue%3E",
        "definitions": {
          "NamedParameters<typeof getValue>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              },
              "dotLocation": {
                "type": "string",
                "description": "Will find all locations starting with this"
              }
            },
            "required": [
              "databaseId",
              "dotLocation"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      },
      {
        "name": "dotLocation",
        "schema": {
          "type": "string",
          "description": "Will find all locations starting with this"
        },
        "simplifiedSchema": {
          "fullComment": "Will find all locations starting with this",
          "type": "string"
        },
        "required": true
      }
    ]
  },
  {
    "modelName": "SwcVariable",
    "name": "piscina",
    "start": 220,
    "end": 363,
    "length": 143,
    "raw": "const piscina = new Piscina({\n  // The URL must be a file:// URL\n  filename: new URL(\"./executeGridPluginWorker.js\", import.meta.url).href,\n});",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcVariable",
    "name": "authToken",
    "start": 365,
    "end": 410,
    "length": 45,
    "raw": "const authToken = \"jlgdgmsuwpqqxrwkwmdxaore\";",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcVariable",
    "name": "hardcodedPlugins",
    "start": 412,
    "end": 727,
    "length": 315,
    "raw": "const hardcodedPlugins = [\n  {\n    __id: \"https://api.codefromanywhere.com/openapi.json\",\n    url: \"https://api.codefromanywhere.com/openapi.json\",\n    headers: `{\"Authorization\":\"Bearer ${authToken}\"}`,\n    localhostOpenapiUrl:\n      \"http://localhost:42000/openapi.json?hostname=api.codefromanywhere.com\",\n  },\n];",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "isExported": false,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm"
  },
  {
    "modelName": "SwcFunction",
    "name": "executeGridPlugin",
    "start": 729,
    "end": 1368,
    "length": 639,
    "raw": "export const executeGridPlugin = async (context: {\n  schema: ActionSchema;\n  dotLocation: string;\n  completeContext: { [key: string]: any };\n  databaseId: string;\n}) => {\n  const { completeContext, dotLocation, schema, databaseId } = context;\n\n  const workerContext: WorkerContext = {\n    completeContext,\n    dotLocation,\n    schema,\n    actionSchemaPlugins: hardcodedPlugins,\n    databaseId,\n  };\n\n  let status = getStatusDb(databaseId);\n  // Set status to queued\n  await status.put(dotLocation, \"queued\");\n\n  // Execute plugin and set result\n  const result = await piscina.run(workerContext);\n\n  console.log({ result }); // Prints 10\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
      "name": "NamedParameters<typeof executeGridPlugin>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/executeGridPlugin.ts",
      "operationRelativePath": "src/server-fs-lmdb/executeGridPlugin.ts",
      "error": "Error: Encountered a reference to a missing definition: \"#/definitions/interface-1366410753-558-3934-1366410753-0-8112\". This is a bug."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "setPropertyStatusDone",
    "start": 379,
    "end": 1509,
    "length": 1130,
    "raw": "export const setPropertyStatusDone = async (\n  schema: ActionSchema,\n  dotLocation: string,\n  databaseId: string,\n) => {\n  let status = getStatusDb(databaseId);\n\n  // Remove busy status\n  status.remove(dotLocation);\n\n  // This would be one level up, so the entire object\n  const baseDotLocation = getDotLocationBase(dotLocation);\n\n  // Look at other columns that have this datapoint in `propertyDependencies`\n  const properties = getSchemaAtDotLocation(schema, baseDotLocation)\n    ?.properties;\n\n  if (!properties) {\n    return;\n  }\n\n  const dependantKeys = Object.keys(properties).filter((key) => {\n    const schema = properties[key];\n    const plugin = Array.isArray(schema[\"x-plugin\"])\n      ? schema[\"x-plugin\"][0]\n      : schema[\"x-plugin\"];\n\n    const isDependant = plugin?.propertyDependencies?.includes(dotLocation);\n    return isDependant;\n  });\n\n  // Set those status to `stale`\n  const dependantDotLocations = dependantKeys.map((k) =>\n    getDotLocationBase(dotLocation, k),\n  );\n\n  await Promise.all(\n    dependantDotLocations.map(async (dotLocation) => {\n      await status.put(dotLocation, \"stale\");\n    }),\n  );\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/setPropertyStatusDone.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/setPropertyStatusDone.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/setPropertyStatusDone.ts",
      "name": "NamedParameters<typeof setPropertyStatusDone>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/setPropertyStatusDone.ts",
      "operationRelativePath": "src/server-fs-lmdb/setPropertyStatusDone.ts",
      "error": "Error: Encountered a reference to a missing definition: \"#/definitions/interface-1366410753-558-3934-1366410753-0-8112\". This is a bug."
    }
  },
  {
    "modelName": "SwcFunction",
    "name": "spawner",
    "start": 181,
    "end": 1147,
    "length": 966,
    "raw": "export const spawner = async (databaseId: string) => {\n  let status = getStatusDb(databaseId);\n  const schema = await getActionSchema(databaseId);\n  setInterval(() => {\n    // get the stale ones\n    const dotLocations = status\n      // Limit is the maximum amount we'll do each 100ms\n      .getRange({ limit: 1000 })\n      .filter((entry) => {\n        const dotLocation = String(entry.key);\n\n        return entry.value === \"stale\";\n      })\n      .map((entry) => String(entry.key)).asArray;\n\n    /**\n   TODO: for recalculations, ensure to only get the stale ones of which the dependants are not also stale\n\n    1. look in schema for each dotLocation to find x-plugin.propertyDependencies. all at once\n\n    2. remove those dotLocations as they\n    */\n\n    console.log({ dotLocations });\n\n    dotLocations.map((dotLocation) =>\n      executeGridPlugin({\n        completeContext: {},\n        dotLocation,\n        schema,\n        databaseId,\n      }),\n    );\n  }, 50);\n};",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/spawner.test.ts",
    "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/spawner.test.ts",
    "isExported": true,
    "packageCategory": "actionschema",
    "packageName": "actionschema",
    "operationClassification": "esm",
    "returnType": {},
    "otherDefs": {},
    "namedParameters": {
      "modelName": "SchemaItem",
      "projectRelativePath": "packages/actionschema/actionschema/src/server-fs-lmdb/spawner.test.ts",
      "name": "NamedParameters<typeof spawner>",
      "absolutePath": "/Users/king/os/packages/actionschema/actionschema/src/server-fs-lmdb/spawner.test.ts",
      "operationRelativePath": "src/server-fs-lmdb/spawner.test.ts",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$ref": "#/definitions/NamedParameters%3Ctypeof%20spawner%3E",
        "definitions": {
          "NamedParameters<typeof spawner>": {
            "type": "object",
            "properties": {
              "databaseId": {
                "type": "string"
              }
            },
            "required": [
              "databaseId"
            ],
            "additionalProperties": false
          }
        }
      }
    },
    "parameters": [
      {
        "name": "databaseId",
        "schema": {
          "type": "string"
        },
        "simplifiedSchema": {
          "type": "string"
        },
        "required": true
      }
    ]
  }
]