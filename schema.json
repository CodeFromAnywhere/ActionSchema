[
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/util/getDotlocationBase.ts",
    "name": "NamedParameters<typeof getDotLocationBase>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/util/getDotlocationBase.ts",
    "operationRelativePath": "src/util/getDotlocationBase.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocationBase%3E",
      "definitions": {
        "NamedParameters<typeof getDotLocationBase>": {
          "type": "object",
          "properties": {
            "dotLocation": {
              "type": "string"
            },
            "replaceDotLocation": {
              "type": "string"
            }
          },
          "required": [
            "dotLocation"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/util/getDotLocation.ts",
    "name": "NamedParameters<typeof getDotLocation>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/util/getDotLocation.ts",
    "operationRelativePath": "src/util/getDotLocation.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDotLocation%3E",
      "definitions": {
        "NamedParameters<typeof getDotLocation>": {
          "type": "object",
          "properties": {
            "object": {},
            "dotLocation": {
              "type": "string"
            }
          },
          "required": [
            "object",
            "dotLocation"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/util/getSchemaAtDotLocation.ts",
    "name": "NamedParameters<typeof getSchemaAtDotLocation>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/util/getSchemaAtDotLocation.ts",
    "operationRelativePath": "src/util/getSchemaAtDotLocation.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getSchemaAtDotLocation%3E",
      "definitions": {
        "NamedParameters<typeof getSchemaAtDotLocation>": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string"
            }
          },
          "required": [
            "schema",
            "dotLocation"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/serverless/executeServerless.ts",
    "name": "NamedParameters<typeof executeServerless>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/serverless/executeServerless.ts",
    "operationRelativePath": "src/environments/serverless/executeServerless.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeServerless%3E",
      "definitions": {
        "NamedParameters<typeof executeServerless>": {
          "type": "object",
          "properties": {
            "context": {
              "$ref": "#/definitions/ExecuteContext"
            }
          },
          "required": [
            "context"
          ],
          "additionalProperties": false
        },
        "ExecuteContext": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {},
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionSchemaPlugin"
              }
            }
          },
          "required": [
            "schema",
            "dotLocation",
            "databaseId",
            "actionSchemaPlugins"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "ActionSchemaPlugin": {
          "type": "object",
          "properties": {
            "__id": {
              "type": "string",
              "description": "The entire URL should be here"
            },
            "headers": {
              "type": "string"
            },
            "localhostOpenapiUrl": {
              "type": "string",
              "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
            },
            "isInternallyHosted": {
              "type": "boolean",
              "description": "If true, this indicates we should always use localhost, even in production."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/serverless/vercelKvStore.ts",
    "name": "NamedParameters<typeof putData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/serverless/vercelKvStore.ts",
    "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
    "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/serverless/vercelKvStore.ts",
    "name": "NamedParameters<typeof getStoreData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/serverless/vercelKvStore.ts",
    "operationRelativePath": "src/environments/serverless/vercelKvStore.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStoreData%3E",
      "definitions": {
        "NamedParameters<typeof getStoreData>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string",
              "description": "E.g. the full JSON object"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/executeGridPluginWorker.ts",
    "name": "NamedParameters<typeof executeGridPluginWorker>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/executeGridPluginWorker.ts",
    "operationRelativePath": "src/environments/server/executeGridPluginWorker.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeGridPluginWorker%3E",
      "definitions": {
        "NamedParameters<typeof executeGridPluginWorker>": {
          "type": "object",
          "properties": {
            "context": {
              "$ref": "#/definitions/WorkerContext"
            }
          },
          "required": [
            "context"
          ],
          "additionalProperties": false
        },
        "WorkerContext": {
          "type": "object",
          "properties": {
            "completeContext": {
              "type": "object"
            },
            "databaseId": {
              "type": "string"
            },
            "dotLocation": {
              "type": "string"
            },
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "required": [
            "completeContext",
            "databaseId",
            "dotLocation",
            "schema"
          ]
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "type": "number"
            },
            "minLength": {
              "type": "number"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "type": "number"
            },
            "minItems": {
              "type": "number"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "type": "number"
            },
            "minProperties": {
              "type": "number"
            },
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "array"
                },
                {
                  "type": "string",
                  "const": "boolean"
                },
                {
                  "type": "string",
                  "const": "integer"
                },
                {
                  "type": "string",
                  "const": "null"
                },
                {
                  "type": "string",
                  "const": "number"
                },
                {
                  "type": "string",
                  "const": "object"
                },
                {
                  "type": "string",
                  "const": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "array",
                      "boolean",
                      "integer",
                      "null",
                      "number",
                      "object",
                      "string"
                    ]
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/setValue.ts",
    "name": "NamedParameters<typeof setValue>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/setValue.ts",
    "operationRelativePath": "src/environments/server/setValue.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20setValue%3E",
      "definitions": {
        "NamedParameters<typeof setValue>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            },
            "dotLocation": {
              "type": "string"
            },
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "data": {},
            "options": {
              "$ref": "#/definitions/ValueOptions",
              "description": "Are to be inferred from the schema"
            }
          },
          "required": [
            "databaseId",
            "dotLocation",
            "schema",
            "data"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "ValueOptions": {
          "type": "object",
          "properties": {
            "objectReplace": {
              "type": "boolean",
              "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
            },
            "arrayReplace": {
              "type": "boolean",
              "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
            },
            "arrayDiscriminatorPropertyKey": {
              "type": "string",
              "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/setValue.ts",
    "name": "ValueOptions",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/setValue.ts",
    "operationRelativePath": "src/environments/server/setValue.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/ValueOptions",
      "definitions": {
        "ValueOptions": {
          "type": "object",
          "properties": {
            "objectReplace": {
              "type": "boolean",
              "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
            },
            "arrayReplace": {
              "type": "boolean",
              "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
            },
            "arrayDiscriminatorPropertyKey": {
              "type": "string",
              "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/storage/getDb.ts",
    "name": "NamedParameters<typeof getDb>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/storage/getDb.ts",
    "operationRelativePath": "src/environments/server/storage/getDb.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getDb%3E",
      "definitions": {
        "NamedParameters<typeof getDb>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/storage/getActionSchema.ts",
    "name": "NamedParameters<typeof getActionSchema>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/storage/getActionSchema.ts",
    "operationRelativePath": "src/environments/server/storage/getActionSchema.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getActionSchema%3E",
      "definitions": {
        "NamedParameters<typeof getActionSchema>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/storage/getStatusDb.ts",
    "name": "NamedParameters<typeof getStatusDb>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/storage/getStatusDb.ts",
    "operationRelativePath": "src/environments/server/storage/getStatusDb.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStatusDb%3E",
      "definitions": {
        "NamedParameters<typeof getStatusDb>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/storage/getValue.ts",
    "name": "NamedParameters<typeof getValue>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/storage/getValue.ts",
    "operationRelativePath": "src/environments/server/storage/getValue.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getValue%3E",
      "definitions": {
        "NamedParameters<typeof getValue>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            },
            "dotLocation": {
              "type": "string",
              "description": "Will find all locations starting with this"
            }
          },
          "required": [
            "databaseId",
            "dotLocation"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/storage/getPlugins.ts",
    "name": "NamedParameters<typeof getPlugins>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/storage/getPlugins.ts",
    "operationRelativePath": "src/environments/server/storage/getPlugins.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getPlugins%3E",
      "definitions": {
        "NamedParameters<typeof getPlugins>": {
          "type": "object",
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/executeGridPlugin.ts",
    "name": "NamedParameters<typeof executeGridPlugin>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/executeGridPlugin.ts",
    "operationRelativePath": "src/environments/server/executeGridPlugin.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeGridPlugin%3E",
      "definitions": {
        "NamedParameters<typeof executeGridPlugin>": {
          "type": "object",
          "properties": {
            "context": {
              "type": "object",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/ActionSchema"
                },
                "dotLocation": {
                  "type": "string"
                },
                "completeContext": {
                  "type": "object"
                },
                "databaseId": {
                  "type": "string"
                }
              },
              "required": [
                "schema",
                "dotLocation",
                "completeContext",
                "databaseId"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "context"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/setPropertyStatusDone.ts",
    "name": "NamedParameters<typeof setPropertyStatusDone>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/setPropertyStatusDone.ts",
    "operationRelativePath": "src/environments/server/setPropertyStatusDone.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20setPropertyStatusDone%3E",
      "definitions": {
        "NamedParameters<typeof setPropertyStatusDone>": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string"
            },
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "schema",
            "dotLocation",
            "databaseId"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/server/spawner.test.ts",
    "name": "NamedParameters<typeof spawner>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/server/spawner.test.ts",
    "operationRelativePath": "src/environments/server/spawner.test.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20spawner%3E",
      "definitions": {
        "NamedParameters<typeof spawner>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/executeBrowser.ts",
    "name": "NamedParameters<typeof executeBrowser>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/executeBrowser.ts",
    "operationRelativePath": "src/environments/browser/executeBrowser.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeBrowser%3E",
      "definitions": {
        "NamedParameters<typeof executeBrowser>": {
          "type": "object",
          "properties": {
            "context": {
              "$ref": "#/definitions/ExecuteContext"
            }
          },
          "required": [
            "context"
          ],
          "additionalProperties": false
        },
        "ExecuteContext": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {},
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionSchemaPlugin"
              }
            }
          },
          "required": [
            "schema",
            "dotLocation",
            "databaseId",
            "actionSchemaPlugins"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "ActionSchemaPlugin": {
          "type": "object",
          "properties": {
            "__id": {
              "type": "string",
              "description": "The entire URL should be here"
            },
            "headers": {
              "type": "string"
            },
            "localhostOpenapiUrl": {
              "type": "string",
              "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
            },
            "isInternallyHosted": {
              "type": "boolean",
              "description": "If true, this indicates we should always use localhost, even in production."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "name": "NamedParameters<typeof getFullscreenEditorHtml>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "operationRelativePath": "src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getFullscreenEditorHtml%3E",
      "definitions": {
        "NamedParameters<typeof getFullscreenEditorHtml>": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "name": "MonacoOptions",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "operationRelativePath": "src/environments/browser/component/getFullscreenEditorHtml.tsx",
    "error": "TypeError: undefined is not an object (evaluating 'typeSymbol.declarations.filter')"
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/component/IndexPage.tsx",
    "name": "NamedParameters<typeof IndexPage>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/component/IndexPage.tsx",
    "operationRelativePath": "src/environments/browser/component/IndexPage.tsx",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20IndexPage%3E",
      "definitions": {
        "NamedParameters<typeof IndexPage>": {
          "type": "object",
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "name": "NamedParameters<typeof initDb>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20initDb%3E",
      "definitions": {
        "NamedParameters<typeof initDb>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "name": "NamedParameters<typeof putData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
    "error": "Error: Encountered a reference to a missing definition: \"#/definitions/NamedParameters%3Ctypeof%20putData%3E\". This is a bug."
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "name": "NamedParameters<typeof deleteData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20deleteData%3E",
      "definitions": {
        "NamedParameters<typeof deleteData>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string"
            },
            "key": {
              "type": "string"
            }
          },
          "required": [
            "databaseId",
            "key"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "name": "NamedParameters<typeof updateData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
    "error": "TypeError: undefined is not an object (evaluating 'type.getId')"
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "name": "NamedParameters<typeof getStoreData>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/storage/indexedDb.ts",
    "operationRelativePath": "src/environments/browser/storage/indexedDb.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getStoreData%3E",
      "definitions": {
        "NamedParameters<typeof getStoreData>": {
          "type": "object",
          "properties": {
            "databaseId": {
              "type": "string",
              "description": "E.g. the full JSON object"
            }
          },
          "required": [
            "databaseId"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/environments/browser/api/cors-proxy.tsx",
    "name": "NamedParameters<typeof CorsProxy>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/environments/browser/api/cors-proxy.tsx",
    "operationRelativePath": "src/environments/browser/api/cors-proxy.tsx",
    "error": "TypeError: WeakMap keys must be objects or non-registered symbols"
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/tryParseYamlToJson.ts",
    "name": "NamedParameters<typeof tryParseYamlToJson>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/tryParseYamlToJson.ts",
    "operationRelativePath": "src/plugin/tryParseYamlToJson.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseYamlToJson%3E",
      "definitions": {
        "NamedParameters<typeof tryParseYamlToJson>": {
          "type": "object",
          "properties": {
            "yamlString": {
              "type": "string"
            }
          },
          "required": [
            "yamlString"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/fetchPlugin.ts",
    "name": "NamedParameters<typeof fetchPlugin>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/fetchPlugin.ts",
    "operationRelativePath": "src/plugin/fetchPlugin.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchPlugin%3E",
      "definitions": {
        "NamedParameters<typeof fetchPlugin>": {
          "type": "object",
          "properties": {
            "details": {
              "type": "object",
              "properties": {
                "apiUrl": {
                  "type": "string"
                },
                "method": {
                  "type": "string"
                },
                "headers": {}
              },
              "required": [
                "apiUrl",
                "method",
                "headers"
              ],
              "additionalProperties": false
            },
            "completeContext": {}
          },
          "required": [
            "details",
            "completeContext"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/fetchOpenapi.ts",
    "name": "NamedParameters<typeof fetchOpenapi>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/fetchOpenapi.ts",
    "operationRelativePath": "src/plugin/fetchOpenapi.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchOpenapi%3E",
      "definitions": {
        "NamedParameters<typeof fetchOpenapi>": {
          "type": "object",
          "properties": {
            "openapiUrl": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/execute.ts",
    "name": "ValueOptions",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/execute.ts",
    "operationRelativePath": "src/plugin/execute.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/ValueOptions",
      "definitions": {
        "ValueOptions": {
          "type": "object",
          "properties": {
            "objectReplace": {
              "type": "boolean",
              "description": "If true, will replace the object rather than overwriting it where needed.\n\nBy default, ActionSchema will overwrite only the given individual properties of an object. In this case, the other properties will be set to stale if needed."
            },
            "arrayReplace": {
              "type": "boolean",
              "description": "If true, will replace items in the array fully.\n\nBy default, ActionSchema will insert into an array with an optional discriminator (see below)."
            },
            "arrayDiscriminatorPropertyKey": {
              "type": "string",
              "description": "If given, must be a key of the object in the array. Will now overwrite/replace object-items where a discriminator matches, while keeping the rest as-is."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/execute.ts",
    "name": "EnvironmentConfig",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/execute.ts",
    "operationRelativePath": "src/plugin/execute.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/EnvironmentConfig",
      "definitions": {
        "EnvironmentConfig": {
          "type": "object",
          "properties": {
            "recurseFunction": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Function to recurse on dependants."
            },
            "setStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Set or remove a status."
            },
            "getStatus": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Get a status"
            },
            "setData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "getData": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              }
            },
            "fetchPlugin": {
              "type": "object",
              "properties": {
                "isFunction": {
                  "type": "boolean",
                  "const": true
                }
              },
              "description": "Can be different in environments"
            }
          },
          "required": [
            "recurseFunction",
            "setStatus",
            "getStatus",
            "setData",
            "getData",
            "fetchPlugin"
          ],
          "additionalProperties": false,
          "description": "The main 3 environments I want to be supporting are:\n\n- server (Users state is all in the server - can be a homeserver)\n- serverless (Users state is stored in some DB)\n- browser (Users state stays with the user)\n\nThe browser is the most scalable one, but is limited as it cannot easily receive callbacks and needs to remain online at all times. On the other hand, the server is the least scalable and hardest to set up, but has no limitations.\n\nThe goal is to share as much code as possible between the three environments, and open source at least the browser variant to get some eyeballs."
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/execute.ts",
    "name": "ExecuteContext",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/execute.ts",
    "operationRelativePath": "src/plugin/execute.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/ExecuteContext",
      "definitions": {
        "ExecuteContext": {
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "#/definitions/ActionSchema"
            },
            "dotLocation": {
              "type": "string",
              "description": "Data dotlocation"
            },
            "databaseId": {
              "type": "string"
            },
            "value": {},
            "skipPlugin": {
              "type": "boolean",
              "description": "If true, skips executing the plugin"
            },
            "returnDotLocation": {
              "type": "string",
              "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
            },
            "updateCallbackUrl": {
              "type": "string",
              "description": "An url to be called back on with updates"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionSchemaPlugin"
              }
            }
          },
          "required": [
            "schema",
            "dotLocation",
            "databaseId",
            "actionSchemaPlugins"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "ActionSchemaPlugin": {
          "type": "object",
          "properties": {
            "__id": {
              "type": "string",
              "description": "The entire URL should be here"
            },
            "headers": {
              "type": "string"
            },
            "localhostOpenapiUrl": {
              "type": "string",
              "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
            },
            "isInternallyHosted": {
              "type": "boolean",
              "description": "If true, this indicates we should always use localhost, even in production."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/execute.ts",
    "name": "NamedParameters<typeof execute>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/execute.ts",
    "operationRelativePath": "src/plugin/execute.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20execute%3E",
      "definitions": {
        "NamedParameters<typeof execute>": {
          "type": "object",
          "properties": {
            "context": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "recurseFunction": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "description": "Function to recurse on dependants."
                },
                "setStatus": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "description": "Set or remove a status."
                },
                "getStatus": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "description": "Get a status"
                },
                "setData": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  }
                },
                "getData": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  }
                },
                "fetchPlugin": {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "description": "Can be different in environments"
                },
                "schema": {
                  "$ref": "#/definitions/ActionSchema"
                },
                "dotLocation": {
                  "type": "string",
                  "description": "Data dotlocation"
                },
                "databaseId": {
                  "type": "string"
                },
                "value": {},
                "skipPlugin": {
                  "type": "boolean",
                  "description": "If true, skips executing the plugin"
                },
                "returnDotLocation": {
                  "type": "string",
                  "description": "If given, must be a dotlocation of the entire schema of the data you want to get back after this one execution."
                },
                "updateCallbackUrl": {
                  "type": "string",
                  "description": "An url to be called back on with updates"
                },
                "actionSchemaPlugins": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ActionSchemaPlugin"
                  }
                }
              },
              "required": [
                "actionSchemaPlugins",
                "databaseId",
                "dotLocation",
                "fetchPlugin",
                "getData",
                "getStatus",
                "recurseFunction",
                "schema",
                "setData",
                "setStatus"
              ]
            }
          },
          "required": [
            "context"
          ],
          "additionalProperties": false
        },
        "ActionSchema": {
          "type": "object",
          "properties": {
            "x-grid-items-location": {
              "type": "string",
              "description": "Useful at root. Dot-notation of where to find the items."
            },
            "x-is-public": {
              "type": "boolean",
              "description": "Useful at root. If this is true, its a schema that is allowed to be read by anyone regardless of the data privacy."
            },
            "x-plugin": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Plugin"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plugin"
                  }
                }
              ]
            },
            "deprecated": {
              "type": "boolean"
            },
            "ui:widget": {
              "type": "string",
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "ui:options": {
              "type": "object",
              "properties": {
                "refModelName": {
                  "type": "string",
                  "description": "If given, it is assumed the value or values of this property link to this model."
                }
              },
              "description": "Determines how it's shown in forms. See: https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/"
            },
            "$id": {
              "type": "string"
            },
            "$source": {
              "type": "string",
              "description": "If given, should be a url linking to the original file, the starting point, if this is not already the one. Used to determine if anything has changed."
            },
            "$schema": {
              "type": "string"
            },
            "$ref": {
              "type": "string"
            },
            "$comment": {
              "type": "string",
              "description": "Comment for the makers of the schema"
            },
            "title": {
              "type": "string",
              "description": "In the form this shows up as the title for the property. More readable."
            },
            "description": {
              "type": "string",
              "description": "Description for schema at this location"
            },
            "default": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "string"
                }
              ]
            },
            "readOnly": {
              "type": "boolean"
            },
            "writeOnly": {
              "type": "boolean"
            },
            "examples": {
              "type": "array",
              "items": {}
            },
            "multipleOf": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            },
            "exclusiveMaximum": {
              "type": "number"
            },
            "minimum": {
              "type": "number"
            },
            "exclusiveMinimum": {
              "type": [
                "number",
                "boolean"
              ]
            },
            "maxLength": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minLength": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "pattern": {
              "type": "string"
            },
            "additionalItems": {
              "$ref": "#/definitions/ActionSchema"
            },
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "$ref": "#/definitions/SchemaArray"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "maxItems": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minItems": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "uniqueItems": {
              "type": "boolean"
            },
            "contains": {
              "$ref": "#/definitions/ActionSchema"
            },
            "maxProperties": {
              "$ref": "#/definitions/NonNegativeInteger"
            },
            "minProperties": {
              "$ref": "#/definitions/NonNegativeIntegerDefault0"
            },
            "required": {
              "$ref": "#/definitions/StringArray"
            },
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "definitions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "patternProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ActionSchema"
              }
            },
            "dependencies": {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ActionSchema"
                  },
                  {
                    "$ref": "#/definitions/StringArray"
                  }
                ]
              }
            },
            "propertyNames": {
              "$ref": "#/definitions/ActionSchema"
            },
            "const": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ActionSchema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "enum": {
              "type": "array",
              "items": {},
              "minItems": 1
            },
            "type": {
              "anyOf": [
                {
                  "$ref": "#/definitions/SimpleTypes"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SimpleTypes"
                  },
                  "minItems": 1
                }
              ]
            },
            "format": {
              "type": "string"
            },
            "contentMediaType": {
              "type": "string"
            },
            "contentEncoding": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/ActionSchema"
            },
            "then": {
              "$ref": "#/definitions/ActionSchema"
            },
            "else": {
              "$ref": "#/definitions/ActionSchema"
            },
            "allOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "anyOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "oneOf": {
              "$ref": "#/definitions/SchemaArray"
            },
            "not": {
              "$ref": "#/definitions/ActionSchema"
            }
          },
          "additionalProperties": false,
          "description": "Core json-schema meta-schema, adapted to make it an ActionSchema with plugin capabilities. Root taken from https://json-schema.org/draft-07/schema#"
        },
        "Plugin": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Could be used to auto-describe the usage of this plugin"
            },
            "summary": {
              "type": "string",
              "description": "Could be used to auto-summarise the usage of this plugin"
            },
            "isGridDataProvided": {
              "type": "boolean",
              "description": "For grid-plugins: if true, entire grid data will be provided into the plugin"
            },
            "concatenateArray": {
              "type": "boolean",
              "description": "For plugins for an array. If true, result will be concatenated to the array, not replaced. Please beware that this makes things less deterministic."
            },
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "condition": {
              "type": "string",
              "description": "If given, must resolve to true in order to run this function"
            },
            "outputLocation": {
              "type": "string",
              "description": "Simple localizer on the object. if defined, will use it as path in the object/array, like `a.b.c[0].d`"
            },
            "isVerticalExpandEnabled": {
              "type": "boolean",
              "description": "If true, this plugin should cause a vertical expansion. This means, for each row it is ran on, it will copy that row for each item in the resulting array. NB: If vertical expand is enabled, initial calculation will still work, including expansion, but recalculation is disabled as it would create exponential expansion."
            },
            "isAutoExecuteDisabled": {
              "type": "boolean",
              "description": "If true, will not auto-execute when dependencies are met. Useful for example for scheduled columns"
            },
            "context": {
              "type": "object",
              "description": "Context given to the function. For strings, you'll be able to use variables here (using `${propertyName}` syntax). This needs to be known by the AI."
            },
            "propertyDependencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Property keys in the same object that are required as context. This is needed to know what can be auto-generated. We can only generate if all used variables aren't undefined/null."
            },
            "priceCredit": {
              "type": "number",
              "description": "Cost estimation to run this plugin. This is needed to give insight in costs for generations."
            },
            "code": {
              "type": "string",
              "description": "TODO: Optionally, this could be an alternative for using '$openapi' (or a complement). This could be code that can be evaluated in javascript/typescript on an edge worker. Imagine this being code that can directly run on edge-workers, infinitely scalable? We now don't rely on creating openapis whatsoever. Instead, there is just this single openapi endpoint that is used for everything. Of course openapis can be better in many cases, since it is more standardised, but I think it could be very powerful to have this, especially for custom things that need to happen."
            },
            "onChangeDependantBehavior": {
              "type": "string",
              "enum": [
                "ignore",
                "stale",
                "reset",
                "delete"
              ],
              "description": "What should the dependant values do when this value changes? If 'stale', there needs to be an `isStalePropertyName` given, so we can set it to stale."
            },
            "stalePropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if true, tells that this value is stale."
            },
            "validPropertyName": {
              "type": "string",
              "description": "If given, this could be a reference to another property that resolves to a boolean that, if false, tells that this value is invalid"
            }
          },
          "description": "ActionSchema plugin"
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "NonNegativeInteger": {
          "type": "number",
          "description": "This file was automatically generated by json-schema-to-typescript. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file, and run json-schema-to-typescript to regenerate this file."
        },
        "NonNegativeIntegerDefault0": {
          "$ref": "#/definitions/NonNegativeInteger"
        },
        "SchemaArray": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSchema"
          },
          "minItems": 1
        },
        "StringArray": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SimpleTypes": {
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "ActionSchemaPlugin": {
          "type": "object",
          "properties": {
            "__id": {
              "type": "string",
              "description": "The entire URL should be here"
            },
            "headers": {
              "type": "string"
            },
            "localhostOpenapiUrl": {
              "type": "string",
              "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
            },
            "isInternallyHosted": {
              "type": "boolean",
              "description": "If true, this indicates we should always use localhost, even in production."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/getOpenapiDetails.ts",
    "name": "NamedParameters<typeof getOpenapiDetails>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/getOpenapiDetails.ts",
    "operationRelativePath": "src/plugin/getOpenapiDetails.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20getOpenapiDetails%3E",
      "definitions": {
        "NamedParameters<typeof getOpenapiDetails>": {
          "type": "object",
          "properties": {
            "$openapi": {
              "$ref": "#/definitions/OpenAPIDetails"
            },
            "actionSchemaPlugins": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionSchemaPlugin"
              }
            }
          },
          "additionalProperties": false
        },
        "OpenAPIDetails": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "method": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "path",
            "method",
            "operationId"
          ],
          "description": "The OpenAPI information required to execute the function."
        },
        "ActionSchemaPlugin": {
          "type": "object",
          "properties": {
            "__id": {
              "type": "string",
              "description": "The entire URL should be here"
            },
            "headers": {
              "type": "string"
            },
            "localhostOpenapiUrl": {
              "type": "string",
              "description": "In case this is given and your IS_DEV is set to \"true\", this URL will be used when executing. However, this URL will never be set into the ActionSchema as this would cause things to not work when pushing to production. This is why it's needed to have this parameter: we want a good development experience at localhost for any openapi we may make, being able to make production-schemas from localhost"
            },
            "isInternallyHosted": {
              "type": "boolean",
              "description": "If true, this indicates we should always use localhost, even in production."
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/executeStaleWatcher.ts",
    "name": "NamedParameters<typeof executeStaleWatcher>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/executeStaleWatcher.ts",
    "operationRelativePath": "src/plugin/executeStaleWatcher.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20executeStaleWatcher%3E",
      "definitions": {
        "NamedParameters<typeof executeStaleWatcher>": {
          "type": "object",
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/tryParseJson.ts",
    "name": "NamedParameters<typeof tryParseJson>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/tryParseJson.ts",
    "operationRelativePath": "src/plugin/tryParseJson.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20tryParseJson%3E",
      "definitions": {
        "NamedParameters<typeof tryParseJson>": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string"
            },
            "logParseError": {
              "type": "boolean"
            }
          },
          "required": [
            "text"
          ],
          "additionalProperties": false
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/fetchWithTimeout.ts",
    "name": "NamedParameters<typeof fetchWithTimeout>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/fetchWithTimeout.ts",
    "operationRelativePath": "src/plugin/fetchWithTimeout.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchWithTimeout%3E",
      "definitions": {
        "NamedParameters<typeof fetchWithTimeout>": {
          "type": "object",
          "properties": {
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Request"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "init": {
              "$ref": "#/definitions/RequestInit"
            },
            "timeoutMs": {
              "type": "number"
            },
            "isNoJson": {
              "type": "boolean"
            },
            "isNoText": {
              "type": "boolean"
            }
          },
          "required": [
            "input"
          ],
          "additionalProperties": false
        },
        "Request": {
          "type": "object",
          "properties": {
            "bodyUsed": {
              "type": "boolean"
            },
            "constructor": {
              "$ref": "#/definitions/Function"
            },
            "credentials": {
              "$ref": "#/definitions/RequestCredentials_"
            },
            "headers": {
              "$ref": "#/definitions/Headers"
            },
            "method": {
              "type": "string"
            },
            "mode": {
              "$ref": "#/definitions/RequestMode_"
            },
            "referrer": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "bodyUsed",
            "constructor",
            "credentials",
            "headers",
            "method",
            "mode",
            "referrer",
            "url"
          ],
          "additionalProperties": false
        },
        "Function": {
          "type": "object",
          "properties": {
            "prototype": {},
            "length": {
              "type": "number"
            },
            "arguments": {},
            "caller": {
              "$ref": "#/definitions/Function"
            }
          },
          "required": [
            "prototype",
            "length",
            "arguments",
            "caller"
          ],
          "additionalProperties": false
        },
        "RequestCredentials_": {
          "type": "string",
          "enum": [
            "omit",
            "same-origin",
            "include"
          ]
        },
        "Headers": {
          "type": "object",
          "additionalProperties": false
        },
        "RequestMode_": {
          "type": "string",
          "enum": [
            "navigate",
            "same-origin",
            "no-cors",
            "cors"
          ]
        },
        "RequestInit": {
          "type": "object",
          "properties": {
            "body": {
              "$ref": "#/definitions/BodyInit_"
            },
            "credentials": {
              "$ref": "#/definitions/RequestCredentials_"
            },
            "headers": {
              "$ref": "#/definitions/HeadersInit_"
            },
            "integrity": {
              "type": "string"
            },
            "keepalive": {
              "type": "boolean"
            },
            "method": {
              "type": "string"
            },
            "mode": {
              "$ref": "#/definitions/RequestMode_"
            },
            "referrer": {
              "type": "string"
            },
            "window": {},
            "signal": {
              "$ref": "#/definitions/AbortSignal"
            }
          },
          "additionalProperties": false
        },
        "BodyInit_": {
          "anyOf": [
            {
              "$ref": "#/definitions/_SourceUri"
            },
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "$ref": "#/definitions/Int8Array"
            },
            {
              "$ref": "#/definitions/Int16Array"
            },
            {
              "$ref": "#/definitions/Int32Array"
            },
            {
              "$ref": "#/definitions/Uint8Array"
            },
            {
              "$ref": "#/definitions/Uint16Array"
            },
            {
              "$ref": "#/definitions/Uint32Array"
            },
            {
              "$ref": "#/definitions/Uint8ClampedArray"
            },
            {
              "$ref": "#/definitions/Float32Array"
            },
            {
              "$ref": "#/definitions/Float64Array"
            },
            {
              "$ref": "#/definitions/DataView"
            },
            {
              "$ref": "#/definitions/ArrayBuffer"
            },
            {
              "$ref": "#/definitions/FormData"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "_SourceUri": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "description": "React Native's implementation of fetch allows this syntax for uploading files from local filesystem. See https://github.com/facebook/react-native/blob/master/Libraries/Network/convertRequestBody.js#L22"
        },
        "Blob": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "size",
            "type"
          ],
          "additionalProperties": false
        },
        "Int8Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "ArrayBufferLike": {
          "$ref": "#/definitions/ArrayBuffer"
        },
        "ArrayBuffer": {
          "type": "object",
          "properties": {
            "byteLength": {
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "additionalProperties": false
        },
        "Int16Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Int32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint8Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint16Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint8ClampedArray": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Float32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Float64Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "DataView": {
          "type": "object",
          "properties": {
            "buffer": {
              "$ref": "#/definitions/ArrayBuffer"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            }
          },
          "required": [
            "buffer",
            "byteLength",
            "byteOffset"
          ],
          "additionalProperties": false
        },
        "FormData": {
          "type": "object",
          "additionalProperties": false
        },
        "HeadersInit_": {
          "anyOf": [
            {
              "$ref": "#/definitions/Headers"
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          ]
        },
        "AbortSignal": {
          "type": "object",
          "properties": {
            "aborted": {
              "type": "boolean",
              "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
            },
            "reason": {},
            "onabort": {
              "anyOf": [
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  }
                }
              ]
            }
          },
          "required": [
            "aborted",
            "reason",
            "onabort"
          ],
          "additionalProperties": false,
          "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
        }
      }
    }
  },
  {
    "modelName": "SchemaItem",
    "projectRelativePath": "packages/actionschema/actionschema2/src/plugin/fetchWithTimeout.ts",
    "name": "NamedParameters<typeof fetchTextWithTimeout>",
    "absolutePath": "/Users/king/os/packages/actionschema/actionschema2/src/plugin/fetchWithTimeout.ts",
    "operationRelativePath": "src/plugin/fetchWithTimeout.ts",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/NamedParameters%3Ctypeof%20fetchTextWithTimeout%3E",
      "definitions": {
        "NamedParameters<typeof fetchTextWithTimeout>": {
          "type": "object",
          "properties": {
            "input": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/Request"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "init": {
              "$ref": "#/definitions/RequestInit"
            },
            "timeoutMs": {
              "type": "number"
            },
            "isNoText": {
              "type": "boolean"
            }
          },
          "required": [
            "input"
          ],
          "additionalProperties": false
        },
        "Request": {
          "type": "object",
          "properties": {
            "bodyUsed": {
              "type": "boolean"
            },
            "constructor": {
              "$ref": "#/definitions/Function"
            },
            "credentials": {
              "$ref": "#/definitions/RequestCredentials_"
            },
            "headers": {
              "$ref": "#/definitions/Headers"
            },
            "method": {
              "type": "string"
            },
            "mode": {
              "$ref": "#/definitions/RequestMode_"
            },
            "referrer": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "bodyUsed",
            "constructor",
            "credentials",
            "headers",
            "method",
            "mode",
            "referrer",
            "url"
          ],
          "additionalProperties": false
        },
        "Function": {
          "type": "object",
          "properties": {
            "prototype": {},
            "length": {
              "type": "number"
            },
            "arguments": {},
            "caller": {
              "$ref": "#/definitions/Function"
            }
          },
          "required": [
            "prototype",
            "length",
            "arguments",
            "caller"
          ],
          "additionalProperties": false
        },
        "RequestCredentials_": {
          "type": "string",
          "enum": [
            "omit",
            "same-origin",
            "include"
          ]
        },
        "Headers": {
          "type": "object",
          "additionalProperties": false
        },
        "RequestMode_": {
          "type": "string",
          "enum": [
            "navigate",
            "same-origin",
            "no-cors",
            "cors"
          ]
        },
        "RequestInit": {
          "type": "object",
          "properties": {
            "body": {
              "$ref": "#/definitions/BodyInit_"
            },
            "credentials": {
              "$ref": "#/definitions/RequestCredentials_"
            },
            "headers": {
              "$ref": "#/definitions/HeadersInit_"
            },
            "integrity": {
              "type": "string"
            },
            "keepalive": {
              "type": "boolean"
            },
            "method": {
              "type": "string"
            },
            "mode": {
              "$ref": "#/definitions/RequestMode_"
            },
            "referrer": {
              "type": "string"
            },
            "window": {},
            "signal": {
              "$ref": "#/definitions/AbortSignal"
            }
          },
          "additionalProperties": false
        },
        "BodyInit_": {
          "anyOf": [
            {
              "$ref": "#/definitions/_SourceUri"
            },
            {
              "$ref": "#/definitions/Blob"
            },
            {
              "$ref": "#/definitions/Int8Array"
            },
            {
              "$ref": "#/definitions/Int16Array"
            },
            {
              "$ref": "#/definitions/Int32Array"
            },
            {
              "$ref": "#/definitions/Uint8Array"
            },
            {
              "$ref": "#/definitions/Uint16Array"
            },
            {
              "$ref": "#/definitions/Uint32Array"
            },
            {
              "$ref": "#/definitions/Uint8ClampedArray"
            },
            {
              "$ref": "#/definitions/Float32Array"
            },
            {
              "$ref": "#/definitions/Float64Array"
            },
            {
              "$ref": "#/definitions/DataView"
            },
            {
              "$ref": "#/definitions/ArrayBuffer"
            },
            {
              "$ref": "#/definitions/FormData"
            },
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "_SourceUri": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "description": "React Native's implementation of fetch allows this syntax for uploading files from local filesystem. See https://github.com/facebook/react-native/blob/master/Libraries/Network/convertRequestBody.js#L22"
        },
        "Blob": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "size",
            "type"
          ],
          "additionalProperties": false
        },
        "Int8Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "ArrayBufferLike": {
          "$ref": "#/definitions/ArrayBuffer"
        },
        "ArrayBuffer": {
          "type": "object",
          "properties": {
            "byteLength": {
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "additionalProperties": false
        },
        "Int16Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Int32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint8Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint16Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Uint8ClampedArray": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Float32Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "Float64Array": {
          "type": "object",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "$ref": "#/definitions/ArrayBufferLike"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "additionalProperties": {
            "type": "number"
          }
        },
        "DataView": {
          "type": "object",
          "properties": {
            "buffer": {
              "$ref": "#/definitions/ArrayBuffer"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            }
          },
          "required": [
            "buffer",
            "byteLength",
            "byteOffset"
          ],
          "additionalProperties": false
        },
        "FormData": {
          "type": "object",
          "additionalProperties": false
        },
        "HeadersInit_": {
          "anyOf": [
            {
              "$ref": "#/definitions/Headers"
            },
            {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          ]
        },
        "AbortSignal": {
          "type": "object",
          "properties": {
            "aborted": {
              "type": "boolean",
              "description": "Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise."
            },
            "reason": {},
            "onabort": {
              "anyOf": [
                {
                  "type": "null"
                },
                {
                  "type": "object",
                  "properties": {
                    "isFunction": {
                      "type": "boolean",
                      "const": true
                    }
                  }
                }
              ]
            }
          },
          "required": [
            "aborted",
            "reason",
            "onabort"
          ],
          "additionalProperties": false,
          "description": "A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object."
        }
      }
    }
  }
]